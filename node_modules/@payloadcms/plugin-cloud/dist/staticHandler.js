"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getStaticHandler", {
    enumerable: true,
    get: function() {
        return getStaticHandler;
    }
});
const _createKey = require("./utilities/createKey");
const _getStorageClient = require("./utilities/getStorageClient");
const getStaticHandler = ({ cachingOptions, collection })=>{
    let maxAge = 86400 // 24 hours default
    ;
    let collCacheConfig;
    if (cachingOptions !== false) {
        // Set custom maxAge for all collections
        maxAge = cachingOptions?.maxAge || maxAge;
        collCacheConfig = cachingOptions?.collections?.[collection.slug] || {};
    }
    // Set maxAge using collection-specific override
    maxAge = collCacheConfig?.maxAge || maxAge;
    const cachingEnabled = cachingOptions !== false && !!process.env.PAYLOAD_CLOUD_CACHE_KEY && collCacheConfig?.enabled !== false;
    return async (req, res, next)=>{
        try {
            const { identityID, storageClient } = await (0, _getStorageClient.getStorageClient)();
            const Key = (0, _createKey.createKey)({
                collection: collection.slug,
                filename: req.params.filename,
                identityID
            });
            const object = await storageClient.getObject({
                Bucket: process.env.PAYLOAD_CLOUD_BUCKET,
                Key
            });
            res.set({
                'Content-Length': object.ContentLength,
                'Content-Type': object.ContentType,
                ...cachingEnabled && {
                    'Cache-Control': `public, max-age=${maxAge}`
                },
                ETag: object.ETag
            });
            if (object?.Body) {
                return object.Body.pipe(res);
            }
            return next();
        } catch (err) {
            req.payload.logger.error({
                err,
                msg: 'Error getting file from cloud storage'
            });
            return next();
        }
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdGF0aWNIYW5kbGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ29sbGVjdGlvbkNvbmZpZyB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFJlYWRhYmxlIH0gZnJvbSAnc3RyZWFtJ1xuXG5pbXBvcnQgdHlwZSB7IENvbGxlY3Rpb25DYWNoaW5nQ29uZmlnLCBQbHVnaW5PcHRpb25zLCBTdGF0aWNIYW5kbGVyIH0gZnJvbSAnLi90eXBlcydcblxuaW1wb3J0IHsgY3JlYXRlS2V5IH0gZnJvbSAnLi91dGlsaXRpZXMvY3JlYXRlS2V5J1xuaW1wb3J0IHsgZ2V0U3RvcmFnZUNsaWVudCB9IGZyb20gJy4vdXRpbGl0aWVzL2dldFN0b3JhZ2VDbGllbnQnXG5cbmludGVyZmFjZSBBcmdzIHtcbiAgY2FjaGluZ09wdGlvbnM/OiBQbHVnaW5PcHRpb25zWyd1cGxvYWRDYWNoaW5nJ11cbiAgY29sbGVjdGlvbjogQ29sbGVjdGlvbkNvbmZpZ1xufVxuXG5leHBvcnQgY29uc3QgZ2V0U3RhdGljSGFuZGxlciA9ICh7IGNhY2hpbmdPcHRpb25zLCBjb2xsZWN0aW9uIH06IEFyZ3MpOiBTdGF0aWNIYW5kbGVyID0+IHtcbiAgbGV0IG1heEFnZSA9IDg2NDAwIC8vIDI0IGhvdXJzIGRlZmF1bHRcbiAgbGV0IGNvbGxDYWNoZUNvbmZpZzogQ29sbGVjdGlvbkNhY2hpbmdDb25maWcgfCB1bmRlZmluZWRcbiAgaWYgKGNhY2hpbmdPcHRpb25zICE9PSBmYWxzZSkge1xuICAgIC8vIFNldCBjdXN0b20gbWF4QWdlIGZvciBhbGwgY29sbGVjdGlvbnNcbiAgICBtYXhBZ2UgPSBjYWNoaW5nT3B0aW9ucz8ubWF4QWdlIHx8IG1heEFnZVxuICAgIGNvbGxDYWNoZUNvbmZpZyA9IGNhY2hpbmdPcHRpb25zPy5jb2xsZWN0aW9ucz8uW2NvbGxlY3Rpb24uc2x1Z10gfHwge31cbiAgfVxuXG4gIC8vIFNldCBtYXhBZ2UgdXNpbmcgY29sbGVjdGlvbi1zcGVjaWZpYyBvdmVycmlkZVxuICBtYXhBZ2UgPSBjb2xsQ2FjaGVDb25maWc/Lm1heEFnZSB8fCBtYXhBZ2VcblxuICBjb25zdCBjYWNoaW5nRW5hYmxlZCA9XG4gICAgY2FjaGluZ09wdGlvbnMgIT09IGZhbHNlICYmXG4gICAgISFwcm9jZXNzLmVudi5QQVlMT0FEX0NMT1VEX0NBQ0hFX0tFWSAmJlxuICAgIGNvbGxDYWNoZUNvbmZpZz8uZW5hYmxlZCAhPT0gZmFsc2VcblxuICByZXR1cm4gYXN5bmMgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgaWRlbnRpdHlJRCwgc3RvcmFnZUNsaWVudCB9ID0gYXdhaXQgZ2V0U3RvcmFnZUNsaWVudCgpXG5cbiAgICAgIGNvbnN0IEtleSA9IGNyZWF0ZUtleSh7XG4gICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb24uc2x1ZyxcbiAgICAgICAgZmlsZW5hbWU6IHJlcS5wYXJhbXMuZmlsZW5hbWUsXG4gICAgICAgIGlkZW50aXR5SUQsXG4gICAgICB9KVxuXG4gICAgICBjb25zdCBvYmplY3QgPSBhd2FpdCBzdG9yYWdlQ2xpZW50LmdldE9iamVjdCh7XG4gICAgICAgIEJ1Y2tldDogcHJvY2Vzcy5lbnYuUEFZTE9BRF9DTE9VRF9CVUNLRVQsXG4gICAgICAgIEtleSxcbiAgICAgIH0pXG5cbiAgICAgIHJlcy5zZXQoe1xuICAgICAgICAnQ29udGVudC1MZW5ndGgnOiBvYmplY3QuQ29udGVudExlbmd0aCxcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6IG9iamVjdC5Db250ZW50VHlwZSxcbiAgICAgICAgLi4uKGNhY2hpbmdFbmFibGVkICYmIHsgJ0NhY2hlLUNvbnRyb2wnOiBgcHVibGljLCBtYXgtYWdlPSR7bWF4QWdlfWAgfSksXG4gICAgICAgIEVUYWc6IG9iamVjdC5FVGFnLFxuICAgICAgfSlcblxuICAgICAgaWYgKG9iamVjdD8uQm9keSkge1xuICAgICAgICByZXR1cm4gKG9iamVjdC5Cb2R5IGFzIFJlYWRhYmxlKS5waXBlKHJlcylcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5leHQoKVxuICAgIH0gY2F0Y2ggKGVycjogdW5rbm93bikge1xuICAgICAgcmVxLnBheWxvYWQubG9nZ2VyLmVycm9yKHsgZXJyLCBtc2c6ICdFcnJvciBnZXR0aW5nIGZpbGUgZnJvbSBjbG91ZCBzdG9yYWdlJyB9KVxuICAgICAgcmV0dXJuIG5leHQoKVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbImdldFN0YXRpY0hhbmRsZXIiLCJjYWNoaW5nT3B0aW9ucyIsImNvbGxlY3Rpb24iLCJtYXhBZ2UiLCJjb2xsQ2FjaGVDb25maWciLCJjb2xsZWN0aW9ucyIsInNsdWciLCJjYWNoaW5nRW5hYmxlZCIsInByb2Nlc3MiLCJlbnYiLCJQQVlMT0FEX0NMT1VEX0NBQ0hFX0tFWSIsImVuYWJsZWQiLCJyZXEiLCJyZXMiLCJuZXh0IiwiaWRlbnRpdHlJRCIsInN0b3JhZ2VDbGllbnQiLCJnZXRTdG9yYWdlQ2xpZW50IiwiS2V5IiwiY3JlYXRlS2V5IiwiZmlsZW5hbWUiLCJwYXJhbXMiLCJvYmplY3QiLCJnZXRPYmplY3QiLCJCdWNrZXQiLCJQQVlMT0FEX0NMT1VEX0JVQ0tFVCIsInNldCIsIkNvbnRlbnRMZW5ndGgiLCJDb250ZW50VHlwZSIsIkVUYWciLCJCb2R5IiwicGlwZSIsImVyciIsInBheWxvYWQiLCJsb2dnZXIiLCJlcnJvciIsIm1zZyJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFhYUE7OztlQUFBQTs7OzJCQVJhO2tDQUNPO0FBTzFCLE1BQU1BLG1CQUFtQixDQUFDLEVBQUVDLGNBQWMsRUFBRUMsVUFBVSxFQUFRO0lBQ25FLElBQUlDLFNBQVMsTUFBTSxtQkFBbUI7O0lBQ3RDLElBQUlDO0lBQ0osSUFBSUgsbUJBQW1CLE9BQU87UUFDNUIsd0NBQXdDO1FBQ3hDRSxTQUFTRixnQkFBZ0JFLFVBQVVBO1FBQ25DQyxrQkFBa0JILGdCQUFnQkksYUFBYSxDQUFDSCxXQUFXSSxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3ZFO0lBRUEsZ0RBQWdEO0lBQ2hESCxTQUFTQyxpQkFBaUJELFVBQVVBO0lBRXBDLE1BQU1JLGlCQUNKTixtQkFBbUIsU0FDbkIsQ0FBQyxDQUFDTyxRQUFRQyxHQUFHLENBQUNDLHVCQUF1QixJQUNyQ04saUJBQWlCTyxZQUFZO0lBRS9CLE9BQU8sT0FBT0MsS0FBS0MsS0FBS0M7UUFDdEIsSUFBSTtZQUNGLE1BQU0sRUFBRUMsVUFBVSxFQUFFQyxhQUFhLEVBQUUsR0FBRyxNQUFNQyxJQUFBQSxrQ0FBZ0I7WUFFNUQsTUFBTUMsTUFBTUMsSUFBQUEsb0JBQVMsRUFBQztnQkFDcEJqQixZQUFZQSxXQUFXSSxJQUFJO2dCQUMzQmMsVUFBVVIsSUFBSVMsTUFBTSxDQUFDRCxRQUFRO2dCQUM3Qkw7WUFDRjtZQUVBLE1BQU1PLFNBQVMsTUFBTU4sY0FBY08sU0FBUyxDQUFDO2dCQUMzQ0MsUUFBUWhCLFFBQVFDLEdBQUcsQ0FBQ2dCLG9CQUFvQjtnQkFDeENQO1lBQ0Y7WUFFQUwsSUFBSWEsR0FBRyxDQUFDO2dCQUNOLGtCQUFrQkosT0FBT0ssYUFBYTtnQkFDdEMsZ0JBQWdCTCxPQUFPTSxXQUFXO2dCQUNsQyxHQUFJckIsa0JBQWtCO29CQUFFLGlCQUFpQixDQUFDLGdCQUFnQixFQUFFSixPQUFPLENBQUM7Z0JBQUMsQ0FBQztnQkFDdEUwQixNQUFNUCxPQUFPTyxJQUFJO1lBQ25CO1lBRUEsSUFBSVAsUUFBUVEsTUFBTTtnQkFDaEIsT0FBTyxBQUFDUixPQUFPUSxJQUFJLENBQWNDLElBQUksQ0FBQ2xCO1lBQ3hDO1lBRUEsT0FBT0M7UUFDVCxFQUFFLE9BQU9rQixLQUFjO1lBQ3JCcEIsSUFBSXFCLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxLQUFLLENBQUM7Z0JBQUVIO2dCQUFLSSxLQUFLO1lBQXdDO1lBQzdFLE9BQU90QjtRQUNUO0lBQ0Y7QUFDRiJ9