"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "payloadCloudEmail", {
    enumerable: true,
    get: function() {
        return payloadCloudEmail;
    }
});
const _nodemailer = /*#__PURE__*/ _interop_require_default(require("nodemailer"));
const _resend = require("resend");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const payloadCloudEmail = (args)=>{
    if (process.env.PAYLOAD_CLOUD !== 'true' || !args) {
        return undefined;
    }
    if (!args.apiKey) throw new Error('apiKey must be provided to use Payload Cloud Email ');
    if (!args.defaultDomain) throw new Error('defaultDomain must be provided to use Payload Cloud Email');
    const { apiKey, config, defaultDomain } = args;
    const customDomainEnvs = Object.keys(process.env).filter((e)=>e.startsWith('PAYLOAD_CLOUD_EMAIL_DOMAIN_') && !e.endsWith('API_KEY'));
    // Match up the envs with api keys: { key: PAYLOAD_CLOUD_EMAIL_DOMAIN_${i}, value: domain }
    const customDomainsResendMap = customDomainEnvs?.reduce((acc, envKey)=>{
        const apiKey = process.env[`${envKey}_API_KEY`];
        if (!apiKey) {
            throw new Error(`PAYLOAD_CLOUD_EMAIL_DOMAIN_${envKey} is missing a corresponding PAYLOAD_CLOUD_EMAIL_DOMAIN_${envKey}_API_KEY`);
        }
        acc[process.env[envKey]] = new _resend.Resend(apiKey);
        return acc;
    }, {}) || {};
    const customDomains = Object.keys(customDomainsResendMap);
    if (customDomains.length) {
        console.log(`Configuring Payload Cloud Email for ${[
            defaultDomain,
            ...customDomains || []
        ].join(', ')}`);
    }
    const resendDomainMap = {
        [defaultDomain]: new _resend.Resend(apiKey),
        ...customDomainsResendMap
    };
    const fromName = config.email?.fromName || 'Payload CMS';
    const fromAddress = config.email?.fromAddress || `cms@${customDomains.length ? customDomains[0] : defaultDomain}`;
    const existingTransport = config.email && 'transport' in config.email && config.email?.transport;
    if (existingTransport) {
        return {
            fromAddress: fromAddress,
            fromName: fromName,
            transport: existingTransport
        };
    }
    const transportConfig = {
        name: 'payload-cloud',
        send: async (mail, callback)=>{
            const { from, html, subject, text, to } = mail.data;
            if (!to) return callback(new Error('No "to" address provided'), null);
            if (!from) return callback(new Error('No "from" address provided'), null);
            const cleanTo = [];
            const toArr = Array.isArray(to) ? to : [
                to
            ];
            toArr.forEach((toItem)=>{
                if (typeof toItem === 'string') {
                    cleanTo.push(toItem);
                } else {
                    cleanTo.push(toItem.address);
                }
            });
            let fromToUse;
            if (typeof from === 'string') {
                fromToUse = from;
            } else if (typeof from === 'object' && 'name' in from && 'address' in from) {
                fromToUse = `${from.name} <${from.address}>`;
            } else {
                fromToUse = `${fromName} <${fromAddress}>`;
            }
            // Parse domain. Can be in 2 possible formats:  "name@domain.com" or "Friendly Name <name@domain.com>"
            const domainMatch = fromToUse.match(/(?<=@)[^(\s|>)]+/g);
            if (!domainMatch) {
                return callback(new Error(`Could not parse domain from "from" address: ${fromToUse}`), null);
            }
            const fromDomain = domainMatch[0];
            const resend = resendDomainMap[fromDomain];
            if (!resend) {
                callback(new Error(`No Resend instance found for domain: ${fromDomain}. Available domains: ${Object.keys(resendDomainMap).join(', ')}`), null);
            }
            try {
                const sendResponse = await resend.sendEmail({
                    from: fromToUse,
                    html: html || text,
                    subject: subject || '<No subject>',
                    to: cleanTo
                });
                if ('error' in sendResponse) {
                    return callback(new Error('Error sending email', {
                        cause: sendResponse.error
                    }), null);
                }
                return callback(null, sendResponse);
            } catch (err) {
                if (isResendError(err)) {
                    return callback(new Error(`Error sending email: ${err.statusCode} ${err.name}: ${err.message}`), null);
                } else if (err instanceof Error) {
                    return callback(new Error(`Unexpected error sending email: ${err.message}: ${err.stack}`), null);
                } else {
                    return callback(new Error(`Unexpected error sending email: ${err}`), null);
                }
            }
        },
        version: '0.0.1'
    };
    return {
        fromAddress: fromAddress,
        fromName: fromName,
        transport: _nodemailer.default.createTransport(transportConfig)
    };
};
function isResendError(err) {
    return Boolean(err && typeof err === 'object' && 'message' in err && 'statusCode' in err && 'name' in err);
}

//# sourceMappingURL=data:application/json;base64,