"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getCacheUploadsAfterChangeHook: function() {
        return getCacheUploadsAfterChangeHook;
    },
    getCacheUploadsAfterDeleteHook: function() {
        return getCacheUploadsAfterDeleteHook;
    }
});
const getCacheUploadsAfterChangeHook = ({ endpoint })=>async ({ doc, operation, req })=>{
        if (!req || !process.env.PAYLOAD_CLOUD_CACHE_KEY) return doc;
        const { res } = req;
        if (res) {
            if (operation === 'update') {
                // Unawaited promise
                purge({
                    doc,
                    endpoint,
                    operation,
                    req
                });
            }
        }
        return doc;
    };
const getCacheUploadsAfterDeleteHook = ({ endpoint })=>async ({ doc, req })=>{
        if (!req || !process.env.PAYLOAD_CLOUD_CACHE_KEY) return doc;
        const { res } = req;
        if (res) {
            // Unawaited promise
            purge({
                doc,
                endpoint,
                operation: 'delete',
                req
            });
        }
        return doc;
    };
async function purge({ doc, endpoint, operation, req }) {
    const filePath = doc.url;
    if (!filePath) {
        req.payload.logger.error({
            msg: 'No url found on doc',
            project: {
                id: process.env.PAYLOAD_CLOUD_PROJECT_ID
            }
        });
        return;
    }
    const body = {
        cacheKey: process.env.PAYLOAD_CLOUD_CACHE_KEY,
        filepath: doc.url,
        projectID: process.env.PAYLOAD_CLOUD_PROJECT_ID
    };
    req.payload.logger.debug({
        filepath: doc.url,
        msg: 'Attempting to purge cache',
        operation,
        project: {
            id: process.env.PAYLOAD_CLOUD_PROJECT_ID
        }
    });
    try {
        const purgeRes = await fetch(`${endpoint}/api/purge-cache`, {
            body: JSON.stringify({
                ...body
            }),
            headers: {
                'Content-Type': 'application/json'
            },
            method: 'POST'
        });
        req.payload.logger.debug({
            msg: 'Purge cache result',
            operation,
            statusCode: purgeRes.status
        });
    } catch (err) {
        req.payload.logger.error({
            body,
            err,
            msg: '/purge-cache call failed'
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91cGxvYWRDYWNoZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIENvbGxlY3Rpb25BZnRlckNoYW5nZUhvb2ssXG4gIENvbGxlY3Rpb25BZnRlckRlbGV0ZUhvb2ssXG4gIFBheWxvYWRSZXF1ZXN0LFxufSBmcm9tICdwYXlsb2FkL3R5cGVzJ1xuXG5pbnRlcmZhY2UgQXJncyB7XG4gIGVuZHBvaW50OiBzdHJpbmdcbn1cblxuZXhwb3J0IGNvbnN0IGdldENhY2hlVXBsb2Fkc0FmdGVyQ2hhbmdlSG9vayA9XG4gICh7IGVuZHBvaW50IH06IEFyZ3MpOiBDb2xsZWN0aW9uQWZ0ZXJDaGFuZ2VIb29rID0+XG4gIGFzeW5jICh7IGRvYywgb3BlcmF0aW9uLCByZXEgfSkgPT4ge1xuICAgIGlmICghcmVxIHx8ICFwcm9jZXNzLmVudi5QQVlMT0FEX0NMT1VEX0NBQ0hFX0tFWSkgcmV0dXJuIGRvY1xuXG4gICAgY29uc3QgeyByZXMgfSA9IHJlcVxuICAgIGlmIChyZXMpIHtcbiAgICAgIGlmIChvcGVyYXRpb24gPT09ICd1cGRhdGUnKSB7XG4gICAgICAgIC8vIFVuYXdhaXRlZCBwcm9taXNlXG4gICAgICAgIHB1cmdlKHsgZG9jLCBlbmRwb2ludCwgb3BlcmF0aW9uLCByZXEgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRvY1xuICB9XG5cbmV4cG9ydCBjb25zdCBnZXRDYWNoZVVwbG9hZHNBZnRlckRlbGV0ZUhvb2sgPVxuICAoeyBlbmRwb2ludCB9OiBBcmdzKTogQ29sbGVjdGlvbkFmdGVyRGVsZXRlSG9vayA9PlxuICBhc3luYyAoeyBkb2MsIHJlcSB9KSA9PiB7XG4gICAgaWYgKCFyZXEgfHwgIXByb2Nlc3MuZW52LlBBWUxPQURfQ0xPVURfQ0FDSEVfS0VZKSByZXR1cm4gZG9jXG5cbiAgICBjb25zdCB7IHJlcyB9ID0gcmVxXG4gICAgaWYgKHJlcykge1xuICAgICAgLy8gVW5hd2FpdGVkIHByb21pc2VcbiAgICAgIHB1cmdlKHsgZG9jLCBlbmRwb2ludCwgb3BlcmF0aW9uOiAnZGVsZXRlJywgcmVxIH0pXG4gICAgfVxuICAgIHJldHVybiBkb2NcbiAgfVxuXG50eXBlIFB1cmdlUmVxdWVzdCA9IHtcbiAgZG9jOiBhbnlcbiAgZW5kcG9pbnQ6IHN0cmluZ1xuICBvcGVyYXRpb246IHN0cmluZ1xuICByZXE6IFBheWxvYWRSZXF1ZXN0XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHB1cmdlKHsgZG9jLCBlbmRwb2ludCwgb3BlcmF0aW9uLCByZXEgfTogUHVyZ2VSZXF1ZXN0KSB7XG4gIGNvbnN0IGZpbGVQYXRoID0gZG9jLnVybFxuXG4gIGlmICghZmlsZVBhdGgpIHtcbiAgICByZXEucGF5bG9hZC5sb2dnZXIuZXJyb3Ioe1xuICAgICAgbXNnOiAnTm8gdXJsIGZvdW5kIG9uIGRvYycsXG4gICAgICBwcm9qZWN0OiB7XG4gICAgICAgIGlkOiBwcm9jZXNzLmVudi5QQVlMT0FEX0NMT1VEX1BST0pFQ1RfSUQsXG4gICAgICB9LFxuICAgIH0pXG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCBib2R5ID0ge1xuICAgIGNhY2hlS2V5OiBwcm9jZXNzLmVudi5QQVlMT0FEX0NMT1VEX0NBQ0hFX0tFWSxcbiAgICBmaWxlcGF0aDogZG9jLnVybCxcbiAgICBwcm9qZWN0SUQ6IHByb2Nlc3MuZW52LlBBWUxPQURfQ0xPVURfUFJPSkVDVF9JRCxcbiAgfVxuICByZXEucGF5bG9hZC5sb2dnZXIuZGVidWcoe1xuICAgIGZpbGVwYXRoOiBkb2MudXJsLFxuICAgIG1zZzogJ0F0dGVtcHRpbmcgdG8gcHVyZ2UgY2FjaGUnLFxuICAgIG9wZXJhdGlvbixcbiAgICBwcm9qZWN0OiB7XG4gICAgICBpZDogcHJvY2Vzcy5lbnYuUEFZTE9BRF9DTE9VRF9QUk9KRUNUX0lELFxuICAgIH0sXG4gIH0pXG5cbiAgdHJ5IHtcbiAgICBjb25zdCBwdXJnZVJlcyA9IGF3YWl0IGZldGNoKGAke2VuZHBvaW50fS9hcGkvcHVyZ2UtY2FjaGVgLCB7XG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIC4uLmJvZHksXG4gICAgICB9KSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIH0sXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICB9KVxuXG4gICAgcmVxLnBheWxvYWQubG9nZ2VyLmRlYnVnKHtcbiAgICAgIG1zZzogJ1B1cmdlIGNhY2hlIHJlc3VsdCcsXG4gICAgICBvcGVyYXRpb24sXG4gICAgICBzdGF0dXNDb2RlOiBwdXJnZVJlcy5zdGF0dXMsXG4gICAgfSlcbiAgfSBjYXRjaCAoZXJyOiB1bmtub3duKSB7XG4gICAgcmVxLnBheWxvYWQubG9nZ2VyLmVycm9yKHsgYm9keSwgZXJyLCBtc2c6ICcvcHVyZ2UtY2FjaGUgY2FsbCBmYWlsZWQnIH0pXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJnZXRDYWNoZVVwbG9hZHNBZnRlckNoYW5nZUhvb2siLCJnZXRDYWNoZVVwbG9hZHNBZnRlckRlbGV0ZUhvb2siLCJlbmRwb2ludCIsImRvYyIsIm9wZXJhdGlvbiIsInJlcSIsInByb2Nlc3MiLCJlbnYiLCJQQVlMT0FEX0NMT1VEX0NBQ0hFX0tFWSIsInJlcyIsInB1cmdlIiwiZmlsZVBhdGgiLCJ1cmwiLCJwYXlsb2FkIiwibG9nZ2VyIiwiZXJyb3IiLCJtc2ciLCJwcm9qZWN0IiwiaWQiLCJQQVlMT0FEX0NMT1VEX1BST0pFQ1RfSUQiLCJib2R5IiwiY2FjaGVLZXkiLCJmaWxlcGF0aCIsInByb2plY3RJRCIsImRlYnVnIiwicHVyZ2VSZXMiLCJmZXRjaCIsIkpTT04iLCJzdHJpbmdpZnkiLCJoZWFkZXJzIiwibWV0aG9kIiwic3RhdHVzQ29kZSIsInN0YXR1cyIsImVyciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFVYUEsOEJBQThCO2VBQTlCQTs7SUFlQUMsOEJBQThCO2VBQTlCQTs7O0FBZk4sTUFBTUQsaUNBQ1gsQ0FBQyxFQUFFRSxRQUFRLEVBQVEsR0FDbkIsT0FBTyxFQUFFQyxHQUFHLEVBQUVDLFNBQVMsRUFBRUMsR0FBRyxFQUFFO1FBQzVCLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxRQUFRQyxHQUFHLENBQUNDLHVCQUF1QixFQUFFLE9BQU9MO1FBRXpELE1BQU0sRUFBRU0sR0FBRyxFQUFFLEdBQUdKO1FBQ2hCLElBQUlJLEtBQUs7WUFDUCxJQUFJTCxjQUFjLFVBQVU7Z0JBQzFCLG9CQUFvQjtnQkFDcEJNLE1BQU07b0JBQUVQO29CQUFLRDtvQkFBVUU7b0JBQVdDO2dCQUFJO1lBQ3hDO1FBQ0Y7UUFDQSxPQUFPRjtJQUNUO0FBRUssTUFBTUYsaUNBQ1gsQ0FBQyxFQUFFQyxRQUFRLEVBQVEsR0FDbkIsT0FBTyxFQUFFQyxHQUFHLEVBQUVFLEdBQUcsRUFBRTtRQUNqQixJQUFJLENBQUNBLE9BQU8sQ0FBQ0MsUUFBUUMsR0FBRyxDQUFDQyx1QkFBdUIsRUFBRSxPQUFPTDtRQUV6RCxNQUFNLEVBQUVNLEdBQUcsRUFBRSxHQUFHSjtRQUNoQixJQUFJSSxLQUFLO1lBQ1Asb0JBQW9CO1lBQ3BCQyxNQUFNO2dCQUFFUDtnQkFBS0Q7Z0JBQVVFLFdBQVc7Z0JBQVVDO1lBQUk7UUFDbEQ7UUFDQSxPQUFPRjtJQUNUO0FBU0YsZUFBZU8sTUFBTSxFQUFFUCxHQUFHLEVBQUVELFFBQVEsRUFBRUUsU0FBUyxFQUFFQyxHQUFHLEVBQWdCO0lBQ2xFLE1BQU1NLFdBQVdSLElBQUlTLEdBQUc7SUFFeEIsSUFBSSxDQUFDRCxVQUFVO1FBQ2JOLElBQUlRLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxLQUFLLENBQUM7WUFDdkJDLEtBQUs7WUFDTEMsU0FBUztnQkFDUEMsSUFBSVosUUFBUUMsR0FBRyxDQUFDWSx3QkFBd0I7WUFDMUM7UUFDRjtRQUNBO0lBQ0Y7SUFFQSxNQUFNQyxPQUFPO1FBQ1hDLFVBQVVmLFFBQVFDLEdBQUcsQ0FBQ0MsdUJBQXVCO1FBQzdDYyxVQUFVbkIsSUFBSVMsR0FBRztRQUNqQlcsV0FBV2pCLFFBQVFDLEdBQUcsQ0FBQ1ksd0JBQXdCO0lBQ2pEO0lBQ0FkLElBQUlRLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDVSxLQUFLLENBQUM7UUFDdkJGLFVBQVVuQixJQUFJUyxHQUFHO1FBQ2pCSSxLQUFLO1FBQ0xaO1FBQ0FhLFNBQVM7WUFDUEMsSUFBSVosUUFBUUMsR0FBRyxDQUFDWSx3QkFBd0I7UUFDMUM7SUFDRjtJQUVBLElBQUk7UUFDRixNQUFNTSxXQUFXLE1BQU1DLE1BQU0sQ0FBQyxFQUFFeEIsU0FBUyxnQkFBZ0IsQ0FBQyxFQUFFO1lBQzFEa0IsTUFBTU8sS0FBS0MsU0FBUyxDQUFDO2dCQUNuQixHQUFHUixJQUFJO1lBQ1Q7WUFDQVMsU0FBUztnQkFDUCxnQkFBZ0I7WUFDbEI7WUFDQUMsUUFBUTtRQUNWO1FBRUF6QixJQUFJUSxPQUFPLENBQUNDLE1BQU0sQ0FBQ1UsS0FBSyxDQUFDO1lBQ3ZCUixLQUFLO1lBQ0xaO1lBQ0EyQixZQUFZTixTQUFTTyxNQUFNO1FBQzdCO0lBQ0YsRUFBRSxPQUFPQyxLQUFjO1FBQ3JCNUIsSUFBSVEsT0FBTyxDQUFDQyxNQUFNLENBQUNDLEtBQUssQ0FBQztZQUFFSztZQUFNYTtZQUFLakIsS0FBSztRQUEyQjtJQUN4RTtBQUNGIn0=