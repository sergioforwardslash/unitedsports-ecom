"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getAfterDeleteHook", {
    enumerable: true,
    get: function() {
        return getAfterDeleteHook;
    }
});
const _createKey = require("../utilities/createKey");
const _getStorageClient = require("../utilities/getStorageClient");
const getAfterDeleteHook = ({ collection })=>{
    return async ({ doc, req })=>{
        try {
            const { identityID, storageClient } = await (0, _getStorageClient.getStorageClient)();
            const filesToDelete = [
                doc.filename,
                ...Object.values(doc?.sizes || []).map((resizedFileData)=>resizedFileData?.filename)
            ];
            const promises = filesToDelete.map(async (filename)=>{
                await storageClient.deleteObject({
                    Bucket: process.env.PAYLOAD_CLOUD_BUCKET,
                    Key: (0, _createKey.createKey)({
                        collection: collection.slug,
                        filename,
                        identityID
                    })
                });
            });
            await Promise.all(promises);
        } catch (err) {
            req.payload.logger.error(`There was an error while deleting files corresponding to the ${collection.labels?.singular} with ID ${doc.id}:`);
            req.payload.logger.error(err);
        }
        return doc;
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy9hZnRlckRlbGV0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFR5cGVXaXRoSUQgfSBmcm9tICdwYXlsb2FkL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBGaWxlRGF0YSB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IENvbGxlY3Rpb25BZnRlckRlbGV0ZUhvb2ssIENvbGxlY3Rpb25Db25maWcgfSBmcm9tICdwYXlsb2FkL3R5cGVzJ1xuXG5pbXBvcnQgdHlwZSB7IFR5cGVXaXRoUHJlZml4IH0gZnJvbSAnLi4vdHlwZXMnXG5cbmltcG9ydCB7IGNyZWF0ZUtleSB9IGZyb20gJy4uL3V0aWxpdGllcy9jcmVhdGVLZXknXG5pbXBvcnQgeyBnZXRTdG9yYWdlQ2xpZW50IH0gZnJvbSAnLi4vdXRpbGl0aWVzL2dldFN0b3JhZ2VDbGllbnQnXG5cbmludGVyZmFjZSBBcmdzIHtcbiAgY29sbGVjdGlvbjogQ29sbGVjdGlvbkNvbmZpZ1xufVxuXG5leHBvcnQgY29uc3QgZ2V0QWZ0ZXJEZWxldGVIb29rID0gKHtcbiAgY29sbGVjdGlvbixcbn06IEFyZ3MpOiBDb2xsZWN0aW9uQWZ0ZXJEZWxldGVIb29rPEZpbGVEYXRhICYgVHlwZVdpdGhJRCAmIFR5cGVXaXRoUHJlZml4PiA9PiB7XG4gIHJldHVybiBhc3luYyAoeyBkb2MsIHJlcSB9KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgaWRlbnRpdHlJRCwgc3RvcmFnZUNsaWVudCB9ID0gYXdhaXQgZ2V0U3RvcmFnZUNsaWVudCgpXG5cbiAgICAgIGNvbnN0IGZpbGVzVG9EZWxldGU6IHN0cmluZ1tdID0gW1xuICAgICAgICBkb2MuZmlsZW5hbWUsXG4gICAgICAgIC4uLk9iamVjdC52YWx1ZXMoZG9jPy5zaXplcyB8fCBbXSkubWFwKChyZXNpemVkRmlsZURhdGEpID0+IHJlc2l6ZWRGaWxlRGF0YT8uZmlsZW5hbWUpLFxuICAgICAgXVxuXG4gICAgICBjb25zdCBwcm9taXNlcyA9IGZpbGVzVG9EZWxldGUubWFwKGFzeW5jIChmaWxlbmFtZSkgPT4ge1xuICAgICAgICBhd2FpdCBzdG9yYWdlQ2xpZW50LmRlbGV0ZU9iamVjdCh7XG4gICAgICAgICAgQnVja2V0OiBwcm9jZXNzLmVudi5QQVlMT0FEX0NMT1VEX0JVQ0tFVCxcbiAgICAgICAgICBLZXk6IGNyZWF0ZUtleSh7IGNvbGxlY3Rpb246IGNvbGxlY3Rpb24uc2x1ZywgZmlsZW5hbWUsIGlkZW50aXR5SUQgfSksXG4gICAgICAgIH0pXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICB9IGNhdGNoIChlcnI6IHVua25vd24pIHtcbiAgICAgIHJlcS5wYXlsb2FkLmxvZ2dlci5lcnJvcihcbiAgICAgICAgYFRoZXJlIHdhcyBhbiBlcnJvciB3aGlsZSBkZWxldGluZyBmaWxlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSAke2NvbGxlY3Rpb24ubGFiZWxzPy5zaW5ndWxhcn0gd2l0aCBJRCAke2RvYy5pZH06YCxcbiAgICAgIClcbiAgICAgIHJlcS5wYXlsb2FkLmxvZ2dlci5lcnJvcihlcnIpXG4gICAgfVxuICAgIHJldHVybiBkb2NcbiAgfVxufVxuIl0sIm5hbWVzIjpbImdldEFmdGVyRGVsZXRlSG9vayIsImNvbGxlY3Rpb24iLCJkb2MiLCJyZXEiLCJpZGVudGl0eUlEIiwic3RvcmFnZUNsaWVudCIsImdldFN0b3JhZ2VDbGllbnQiLCJmaWxlc1RvRGVsZXRlIiwiZmlsZW5hbWUiLCJPYmplY3QiLCJ2YWx1ZXMiLCJzaXplcyIsIm1hcCIsInJlc2l6ZWRGaWxlRGF0YSIsInByb21pc2VzIiwiZGVsZXRlT2JqZWN0IiwiQnVja2V0IiwicHJvY2VzcyIsImVudiIsIlBBWUxPQURfQ0xPVURfQlVDS0VUIiwiS2V5IiwiY3JlYXRlS2V5Iiwic2x1ZyIsIlByb21pc2UiLCJhbGwiLCJlcnIiLCJwYXlsb2FkIiwibG9nZ2VyIiwiZXJyb3IiLCJsYWJlbHMiLCJzaW5ndWxhciIsImlkIl0sIm1hcHBpbmdzIjoiOzs7OytCQWFhQTs7O2VBQUFBOzs7MkJBUGE7a0NBQ087QUFNMUIsTUFBTUEscUJBQXFCLENBQUMsRUFDakNDLFVBQVUsRUFDTDtJQUNMLE9BQU8sT0FBTyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRTtRQUN4QixJQUFJO1lBQ0YsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLGFBQWEsRUFBRSxHQUFHLE1BQU1DLElBQUFBLGtDQUFnQjtZQUU1RCxNQUFNQyxnQkFBMEI7Z0JBQzlCTCxJQUFJTSxRQUFRO21CQUNUQyxPQUFPQyxNQUFNLENBQUNSLEtBQUtTLFNBQVMsRUFBRSxFQUFFQyxHQUFHLENBQUMsQ0FBQ0Msa0JBQW9CQSxpQkFBaUJMO2FBQzlFO1lBRUQsTUFBTU0sV0FBV1AsY0FBY0ssR0FBRyxDQUFDLE9BQU9KO2dCQUN4QyxNQUFNSCxjQUFjVSxZQUFZLENBQUM7b0JBQy9CQyxRQUFRQyxRQUFRQyxHQUFHLENBQUNDLG9CQUFvQjtvQkFDeENDLEtBQUtDLElBQUFBLG9CQUFTLEVBQUM7d0JBQUVwQixZQUFZQSxXQUFXcUIsSUFBSTt3QkFBRWQ7d0JBQVVKO29CQUFXO2dCQUNyRTtZQUNGO1lBRUEsTUFBTW1CLFFBQVFDLEdBQUcsQ0FBQ1Y7UUFDcEIsRUFBRSxPQUFPVyxLQUFjO1lBQ3JCdEIsSUFBSXVCLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxLQUFLLENBQ3RCLENBQUMsNkRBQTZELEVBQUUzQixXQUFXNEIsTUFBTSxFQUFFQyxTQUFTLFNBQVMsRUFBRTVCLElBQUk2QixFQUFFLENBQUMsQ0FBQyxDQUFDO1lBRWxINUIsSUFBSXVCLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxLQUFLLENBQUNIO1FBQzNCO1FBQ0EsT0FBT3ZCO0lBQ1Q7QUFDRiJ9