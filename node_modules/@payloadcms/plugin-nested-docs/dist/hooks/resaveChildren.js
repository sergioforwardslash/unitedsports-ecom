"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _populateBreadcrumbs = /*#__PURE__*/ _interop_require_default(require("../utilities/populateBreadcrumbs"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const resaveChildren = (pluginConfig, collection)=>async ({ doc, req: { locale, payload }, req })=>{
        const resaveChildrenAsync = async ()=>{
            const children = await payload.find({
                collection: collection.slug,
                depth: 0,
                locale,
                req,
                where: {
                    parent: {
                        equals: doc.id
                    }
                }
            });
            try {
                children.docs.forEach(async (child)=>{
                    const updateAsDraft = typeof collection.versions === 'object' && collection.versions.drafts && child._status !== 'published';
                    await payload.update({
                        id: child.id,
                        collection: collection.slug,
                        data: {
                            ...child,
                            breadcrumbs: await (0, _populateBreadcrumbs.default)(req, pluginConfig, collection, child)
                        },
                        depth: 0,
                        draft: updateAsDraft,
                        locale,
                        req
                    });
                });
            } catch (err) {
                payload.logger.error(`Nested Docs plugin has had an error while re-saving a child document.`);
                payload.logger.error(err);
            }
        };
        await resaveChildrenAsync();
        return undefined;
    };
const _default = resaveChildren;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy9yZXNhdmVDaGlsZHJlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IENvbGxlY3Rpb25BZnRlckNoYW5nZUhvb2ssIENvbGxlY3Rpb25Db25maWcgfSBmcm9tICdwYXlsb2FkL3R5cGVzJ1xuXG5pbXBvcnQgdHlwZSB7IFBsdWdpbkNvbmZpZyB9IGZyb20gJy4uL3R5cGVzJ1xuXG5pbXBvcnQgcG9wdWxhdGVCcmVhZGNydW1icyBmcm9tICcuLi91dGlsaXRpZXMvcG9wdWxhdGVCcmVhZGNydW1icydcblxuY29uc3QgcmVzYXZlQ2hpbGRyZW4gPVxuICAocGx1Z2luQ29uZmlnOiBQbHVnaW5Db25maWcsIGNvbGxlY3Rpb246IENvbGxlY3Rpb25Db25maWcpOiBDb2xsZWN0aW9uQWZ0ZXJDaGFuZ2VIb29rID0+XG4gIGFzeW5jICh7IGRvYywgcmVxOiB7IGxvY2FsZSwgcGF5bG9hZCB9LCByZXEgfSkgPT4ge1xuICAgIGNvbnN0IHJlc2F2ZUNoaWxkcmVuQXN5bmMgPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IGF3YWl0IHBheWxvYWQuZmluZCh7XG4gICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb24uc2x1ZyxcbiAgICAgICAgZGVwdGg6IDAsXG4gICAgICAgIGxvY2FsZSxcbiAgICAgICAgcmVxLFxuICAgICAgICB3aGVyZToge1xuICAgICAgICAgIHBhcmVudDoge1xuICAgICAgICAgICAgZXF1YWxzOiBkb2MuaWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNoaWxkcmVuLmRvY3MuZm9yRWFjaChhc3luYyAoY2hpbGQ6IGFueSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHVwZGF0ZUFzRHJhZnQgPVxuICAgICAgICAgICAgdHlwZW9mIGNvbGxlY3Rpb24udmVyc2lvbnMgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICBjb2xsZWN0aW9uLnZlcnNpb25zLmRyYWZ0cyAmJlxuICAgICAgICAgICAgY2hpbGQuX3N0YXR1cyAhPT0gJ3B1Ymxpc2hlZCdcblxuICAgICAgICAgIGF3YWl0IHBheWxvYWQudXBkYXRlKHtcbiAgICAgICAgICAgIGlkOiBjaGlsZC5pZCxcbiAgICAgICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb24uc2x1ZyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgLi4uY2hpbGQsXG4gICAgICAgICAgICAgIGJyZWFkY3J1bWJzOiBhd2FpdCBwb3B1bGF0ZUJyZWFkY3J1bWJzKHJlcSwgcGx1Z2luQ29uZmlnLCBjb2xsZWN0aW9uLCBjaGlsZCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVwdGg6IDAsXG4gICAgICAgICAgICBkcmFmdDogdXBkYXRlQXNEcmFmdCxcbiAgICAgICAgICAgIGxvY2FsZSxcbiAgICAgICAgICAgIHJlcSxcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSBjYXRjaCAoZXJyOiB1bmtub3duKSB7XG4gICAgICAgIHBheWxvYWQubG9nZ2VyLmVycm9yKFxuICAgICAgICAgIGBOZXN0ZWQgRG9jcyBwbHVnaW4gaGFzIGhhZCBhbiBlcnJvciB3aGlsZSByZS1zYXZpbmcgYSBjaGlsZCBkb2N1bWVudC5gLFxuICAgICAgICApXG4gICAgICAgIHBheWxvYWQubG9nZ2VyLmVycm9yKGVycilcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhd2FpdCByZXNhdmVDaGlsZHJlbkFzeW5jKClcblxuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG5leHBvcnQgZGVmYXVsdCByZXNhdmVDaGlsZHJlblxuIl0sIm5hbWVzIjpbInJlc2F2ZUNoaWxkcmVuIiwicGx1Z2luQ29uZmlnIiwiY29sbGVjdGlvbiIsImRvYyIsInJlcSIsImxvY2FsZSIsInBheWxvYWQiLCJyZXNhdmVDaGlsZHJlbkFzeW5jIiwiY2hpbGRyZW4iLCJmaW5kIiwic2x1ZyIsImRlcHRoIiwid2hlcmUiLCJwYXJlbnQiLCJlcXVhbHMiLCJpZCIsImRvY3MiLCJmb3JFYWNoIiwiY2hpbGQiLCJ1cGRhdGVBc0RyYWZ0IiwidmVyc2lvbnMiLCJkcmFmdHMiLCJfc3RhdHVzIiwidXBkYXRlIiwiZGF0YSIsImJyZWFkY3J1bWJzIiwicG9wdWxhdGVCcmVhZGNydW1icyIsImRyYWZ0IiwiZXJyIiwibG9nZ2VyIiwiZXJyb3IiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiI7Ozs7K0JBdURBOzs7ZUFBQTs7OzRFQW5EZ0M7Ozs7OztBQUVoQyxNQUFNQSxpQkFDSixDQUFDQyxjQUE0QkMsYUFDN0IsT0FBTyxFQUFFQyxHQUFHLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUUsRUFBRUYsR0FBRyxFQUFFO1FBQzNDLE1BQU1HLHNCQUFzQjtZQUMxQixNQUFNQyxXQUFXLE1BQU1GLFFBQVFHLElBQUksQ0FBQztnQkFDbENQLFlBQVlBLFdBQVdRLElBQUk7Z0JBQzNCQyxPQUFPO2dCQUNQTjtnQkFDQUQ7Z0JBQ0FRLE9BQU87b0JBQ0xDLFFBQVE7d0JBQ05DLFFBQVFYLElBQUlZLEVBQUU7b0JBQ2hCO2dCQUNGO1lBQ0Y7WUFFQSxJQUFJO2dCQUNGUCxTQUFTUSxJQUFJLENBQUNDLE9BQU8sQ0FBQyxPQUFPQztvQkFDM0IsTUFBTUMsZ0JBQ0osT0FBT2pCLFdBQVdrQixRQUFRLEtBQUssWUFDL0JsQixXQUFXa0IsUUFBUSxDQUFDQyxNQUFNLElBQzFCSCxNQUFNSSxPQUFPLEtBQUs7b0JBRXBCLE1BQU1oQixRQUFRaUIsTUFBTSxDQUFDO3dCQUNuQlIsSUFBSUcsTUFBTUgsRUFBRTt3QkFDWmIsWUFBWUEsV0FBV1EsSUFBSTt3QkFDM0JjLE1BQU07NEJBQ0osR0FBR04sS0FBSzs0QkFDUk8sYUFBYSxNQUFNQyxJQUFBQSw0QkFBbUIsRUFBQ3RCLEtBQUtILGNBQWNDLFlBQVlnQjt3QkFDeEU7d0JBQ0FQLE9BQU87d0JBQ1BnQixPQUFPUjt3QkFDUGQ7d0JBQ0FEO29CQUNGO2dCQUNGO1lBQ0YsRUFBRSxPQUFPd0IsS0FBYztnQkFDckJ0QixRQUFRdUIsTUFBTSxDQUFDQyxLQUFLLENBQ2xCLENBQUMscUVBQXFFLENBQUM7Z0JBRXpFeEIsUUFBUXVCLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDRjtZQUN2QjtRQUNGO1FBRUEsTUFBTXJCO1FBRU4sT0FBT3dCO0lBQ1Q7TUFFRixXQUFlL0IifQ==