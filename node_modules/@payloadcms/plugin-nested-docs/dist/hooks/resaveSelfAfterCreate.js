"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
// This hook automatically re-saves a document after it is created
// so that we can build its breadcrumbs with the newly created document's ID.
const resaveSelfAfterCreate = (collection)=>async ({ doc, operation, req })=>{
        const { locale, payload } = req;
        const { breadcrumbs = [] } = doc;
        if (operation === 'create') {
            const originalDocWithDepth0 = await payload.findByID({
                id: doc.id,
                collection: collection.slug,
                depth: 0,
                req
            });
            const updateAsDraft = typeof collection.versions === 'object' && collection.versions.drafts && doc._status !== 'published';
            try {
                await payload.update({
                    id: doc.id,
                    collection: collection.slug,
                    data: {
                        ...originalDocWithDepth0,
                        breadcrumbs: breadcrumbs?.map((crumb, i)=>({
                                ...crumb,
                                doc: breadcrumbs.length === i + 1 ? doc.id : crumb.doc
                            })) || []
                    },
                    depth: 0,
                    draft: updateAsDraft,
                    locale,
                    req
                });
            } catch (err) {
                payload.logger.error(`Nested Docs plugin has had an error while adding breadcrumbs during document creation.`);
                payload.logger.error(err);
            }
        }
        return undefined;
    };
const _default = resaveSelfAfterCreate;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy9yZXNhdmVTZWxmQWZ0ZXJDcmVhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDb2xsZWN0aW9uQWZ0ZXJDaGFuZ2VIb29rLCBDb2xsZWN0aW9uQ29uZmlnIH0gZnJvbSAncGF5bG9hZC90eXBlcydcblxuaW1wb3J0IHR5cGUgeyBCcmVhZGNydW1iIH0gZnJvbSAnLi4vdHlwZXMnXG5cbmludGVyZmFjZSBEb2NXaXRoQnJlYWRjcnVtYnMge1xuICBicmVhZGNydW1iczogQnJlYWRjcnVtYltdXG59XG5cbi8vIFRoaXMgaG9vayBhdXRvbWF0aWNhbGx5IHJlLXNhdmVzIGEgZG9jdW1lbnQgYWZ0ZXIgaXQgaXMgY3JlYXRlZFxuLy8gc28gdGhhdCB3ZSBjYW4gYnVpbGQgaXRzIGJyZWFkY3J1bWJzIHdpdGggdGhlIG5ld2x5IGNyZWF0ZWQgZG9jdW1lbnQncyBJRC5cblxuY29uc3QgcmVzYXZlU2VsZkFmdGVyQ3JlYXRlID1cbiAgKGNvbGxlY3Rpb246IENvbGxlY3Rpb25Db25maWcpOiBDb2xsZWN0aW9uQWZ0ZXJDaGFuZ2VIb29rID0+XG4gIGFzeW5jICh7IGRvYywgb3BlcmF0aW9uLCByZXEgfSkgPT4ge1xuICAgIGNvbnN0IHsgbG9jYWxlLCBwYXlsb2FkIH0gPSByZXFcbiAgICBjb25zdCB7IGJyZWFkY3J1bWJzID0gW10gfSA9IGRvYyBhcyBEb2NXaXRoQnJlYWRjcnVtYnNcblxuICAgIGlmIChvcGVyYXRpb24gPT09ICdjcmVhdGUnKSB7XG4gICAgICBjb25zdCBvcmlnaW5hbERvY1dpdGhEZXB0aDAgPSBhd2FpdCBwYXlsb2FkLmZpbmRCeUlEKHtcbiAgICAgICAgaWQ6IGRvYy5pZCxcbiAgICAgICAgY29sbGVjdGlvbjogY29sbGVjdGlvbi5zbHVnLFxuICAgICAgICBkZXB0aDogMCxcbiAgICAgICAgcmVxLFxuICAgICAgfSlcblxuICAgICAgY29uc3QgdXBkYXRlQXNEcmFmdCA9XG4gICAgICAgIHR5cGVvZiBjb2xsZWN0aW9uLnZlcnNpb25zID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBjb2xsZWN0aW9uLnZlcnNpb25zLmRyYWZ0cyAmJlxuICAgICAgICBkb2MuX3N0YXR1cyAhPT0gJ3B1Ymxpc2hlZCdcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgcGF5bG9hZC51cGRhdGUoe1xuICAgICAgICAgIGlkOiBkb2MuaWQsXG4gICAgICAgICAgY29sbGVjdGlvbjogY29sbGVjdGlvbi5zbHVnLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIC4uLm9yaWdpbmFsRG9jV2l0aERlcHRoMCxcbiAgICAgICAgICAgIGJyZWFkY3J1bWJzOlxuICAgICAgICAgICAgICBicmVhZGNydW1icz8ubWFwKChjcnVtYiwgaSkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5jcnVtYixcbiAgICAgICAgICAgICAgICBkb2M6IGJyZWFkY3J1bWJzLmxlbmd0aCA9PT0gaSArIDEgPyBkb2MuaWQgOiBjcnVtYi5kb2MsXG4gICAgICAgICAgICAgIH0pKSB8fCBbXSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlcHRoOiAwLFxuICAgICAgICAgIGRyYWZ0OiB1cGRhdGVBc0RyYWZ0LFxuICAgICAgICAgIGxvY2FsZSxcbiAgICAgICAgICByZXEsXG4gICAgICAgIH0pXG4gICAgICB9IGNhdGNoIChlcnI6IHVua25vd24pIHtcbiAgICAgICAgcGF5bG9hZC5sb2dnZXIuZXJyb3IoXG4gICAgICAgICAgYE5lc3RlZCBEb2NzIHBsdWdpbiBoYXMgaGFkIGFuIGVycm9yIHdoaWxlIGFkZGluZyBicmVhZGNydW1icyBkdXJpbmcgZG9jdW1lbnQgY3JlYXRpb24uYCxcbiAgICAgICAgKVxuICAgICAgICBwYXlsb2FkLmxvZ2dlci5lcnJvcihlcnIpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbmV4cG9ydCBkZWZhdWx0IHJlc2F2ZVNlbGZBZnRlckNyZWF0ZVxuIl0sIm5hbWVzIjpbInJlc2F2ZVNlbGZBZnRlckNyZWF0ZSIsImNvbGxlY3Rpb24iLCJkb2MiLCJvcGVyYXRpb24iLCJyZXEiLCJsb2NhbGUiLCJwYXlsb2FkIiwiYnJlYWRjcnVtYnMiLCJvcmlnaW5hbERvY1dpdGhEZXB0aDAiLCJmaW5kQnlJRCIsImlkIiwic2x1ZyIsImRlcHRoIiwidXBkYXRlQXNEcmFmdCIsInZlcnNpb25zIiwiZHJhZnRzIiwiX3N0YXR1cyIsInVwZGF0ZSIsImRhdGEiLCJtYXAiLCJjcnVtYiIsImkiLCJsZW5ndGgiLCJkcmFmdCIsImVyciIsImxvZ2dlciIsImVycm9yIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7OytCQTBEQTs7O2VBQUE7OztBQWxEQSxrRUFBa0U7QUFDbEUsNkVBQTZFO0FBRTdFLE1BQU1BLHdCQUNKLENBQUNDLGFBQ0QsT0FBTyxFQUFFQyxHQUFHLEVBQUVDLFNBQVMsRUFBRUMsR0FBRyxFQUFFO1FBQzVCLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBR0Y7UUFDNUIsTUFBTSxFQUFFRyxjQUFjLEVBQUUsRUFBRSxHQUFHTDtRQUU3QixJQUFJQyxjQUFjLFVBQVU7WUFDMUIsTUFBTUssd0JBQXdCLE1BQU1GLFFBQVFHLFFBQVEsQ0FBQztnQkFDbkRDLElBQUlSLElBQUlRLEVBQUU7Z0JBQ1ZULFlBQVlBLFdBQVdVLElBQUk7Z0JBQzNCQyxPQUFPO2dCQUNQUjtZQUNGO1lBRUEsTUFBTVMsZ0JBQ0osT0FBT1osV0FBV2EsUUFBUSxLQUFLLFlBQy9CYixXQUFXYSxRQUFRLENBQUNDLE1BQU0sSUFDMUJiLElBQUljLE9BQU8sS0FBSztZQUVsQixJQUFJO2dCQUNGLE1BQU1WLFFBQVFXLE1BQU0sQ0FBQztvQkFDbkJQLElBQUlSLElBQUlRLEVBQUU7b0JBQ1ZULFlBQVlBLFdBQVdVLElBQUk7b0JBQzNCTyxNQUFNO3dCQUNKLEdBQUdWLHFCQUFxQjt3QkFDeEJELGFBQ0VBLGFBQWFZLElBQUksQ0FBQ0MsT0FBT0MsSUFBTyxDQUFBO2dDQUM5QixHQUFHRCxLQUFLO2dDQUNSbEIsS0FBS0ssWUFBWWUsTUFBTSxLQUFLRCxJQUFJLElBQUluQixJQUFJUSxFQUFFLEdBQUdVLE1BQU1sQixHQUFHOzRCQUN4RCxDQUFBLE1BQU8sRUFBRTtvQkFDYjtvQkFDQVUsT0FBTztvQkFDUFcsT0FBT1Y7b0JBQ1BSO29CQUNBRDtnQkFDRjtZQUNGLEVBQUUsT0FBT29CLEtBQWM7Z0JBQ3JCbEIsUUFBUW1CLE1BQU0sQ0FBQ0MsS0FBSyxDQUNsQixDQUFDLHNGQUFzRixDQUFDO2dCQUUxRnBCLFFBQVFtQixNQUFNLENBQUNDLEtBQUssQ0FBQ0Y7WUFDdkI7UUFDRjtRQUVBLE9BQU9HO0lBQ1Q7TUFFRixXQUFlM0IifQ==