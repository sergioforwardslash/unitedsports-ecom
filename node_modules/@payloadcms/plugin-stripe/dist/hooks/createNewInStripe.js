"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNewInStripe = void 0;
var errors_1 = require("payload/errors");
var stripe_1 = __importDefault(require("stripe"));
var deepen_1 = require("../utilities/deepen");
var stripeSecretKey = process.env.STRIPE_SECRET_KEY;
var stripe = new stripe_1.default(stripeSecretKey || '', { apiVersion: '2022-08-01' });
var createNewInStripe = function (args) { return __awaiter(void 0, void 0, void 0, function () {
    var req, operation, data, collection, stripeConfig, _a, sync, logs, payload, dataRef, collectionSlug_1, syncConfig, syncedFields, stripeResource, error_1, msg, stripeResource, error_2, msg;
    var _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                req = args.req, operation = args.operation, data = args.data, collection = args.collection, stripeConfig = args.stripeConfig;
                _a = stripeConfig || {}, sync = _a.sync, logs = _a.logs;
                payload = req === null || req === void 0 ? void 0 : req.payload;
                dataRef = data || {};
                if (process.env.NODE_ENV === 'test') {
                    dataRef.stripeID = 'test';
                    return [2 /*return*/, dataRef];
                }
                if (!payload) return [3 /*break*/, 9];
                if (!(data === null || data === void 0 ? void 0 : data.skipSync)) return [3 /*break*/, 1];
                if (logs)
                    payload.logger.info("Bypassing collection-level hooks.");
                return [3 /*break*/, 9];
            case 1:
                // initialize as 'false' so that all Payload admin events sync to Stripe
                // then conditionally set to 'true' to for events that originate from webhooks
                // this will prevent webhook events from triggering an unnecessary sync / infinite loop
                dataRef.skipSync = false;
                collectionSlug_1 = (collection || {}).slug;
                syncConfig = sync === null || sync === void 0 ? void 0 : sync.find(function (conf) { return conf.collection === collectionSlug_1; });
                if (!syncConfig) return [3 /*break*/, 9];
                syncedFields = syncConfig.fields.reduce(function (acc, field) {
                    var fieldPath = field.fieldPath, stripeProperty = field.stripeProperty;
                    acc[stripeProperty] = dataRef[fieldPath];
                    return acc;
                }, {});
                syncedFields = (0, deepen_1.deepen)(syncedFields);
                if (!(operation === 'update')) return [3 /*break*/, 5];
                if (logs)
                    payload.logger.info("A '".concat(collectionSlug_1, "' document has changed in Payload with ID: '").concat(data === null || data === void 0 ? void 0 : data.id, "', syncing with Stripe..."));
                if (!!dataRef.stripeID) return [3 /*break*/, 5];
                _d.label = 2;
            case 2:
                _d.trys.push([2, 4, , 5]);
                return [4 /*yield*/, ((_b = stripe === null || stripe === void 0 ? void 0 : stripe[syncConfig.stripeResourceType]) === null || _b === void 0 ? void 0 : _b.create(syncedFields))];
            case 3:
                stripeResource = _d.sent();
                if (logs)
                    payload.logger.info("\u2705 Successfully created new '".concat(syncConfig.stripeResourceType, "' resource in Stripe with ID: '").concat(stripeResource.id, "'."));
                dataRef.stripeID = stripeResource.id;
                // NOTE: this is to prevent sync in the "afterChange" hook
                dataRef.skipSync = true;
                return [3 /*break*/, 5];
            case 4:
                error_1 = _d.sent();
                msg = error_1 instanceof Error ? error_1.message : error_1;
                if (logs)
                    payload.logger.error("- Error creating Stripe document: ".concat(msg));
                return [3 /*break*/, 5];
            case 5:
                if (!(operation === 'create')) return [3 /*break*/, 9];
                if (logs)
                    payload.logger.info("A new '".concat(collectionSlug_1, "' document was created in Payload with ID: '").concat(data === null || data === void 0 ? void 0 : data.id, "', syncing with Stripe..."));
                _d.label = 6;
            case 6:
                _d.trys.push([6, 8, , 9]);
                if (logs)
                    payload.logger.info("- Creating new '".concat(syncConfig.stripeResourceType, "' resource in Stripe..."));
                return [4 /*yield*/, ((_c = stripe === null || stripe === void 0 ? void 0 : stripe[syncConfig.stripeResourceType]) === null || _c === void 0 ? void 0 : _c.create(syncedFields))];
            case 7:
                stripeResource = _d.sent();
                if (logs)
                    payload.logger.info("\u2705 Successfully created new '".concat(syncConfig.stripeResourceType, "' resource in Stripe with ID: '").concat(stripeResource.id, "'."));
                dataRef.stripeID = stripeResource.id;
                // IMPORTANT: this is to prevent sync in the "afterChange" hook
                dataRef.skipSync = true;
                return [3 /*break*/, 9];
            case 8:
                error_2 = _d.sent();
                msg = error_2 instanceof Error ? error_2.message : error_2;
                throw new errors_1.APIError("Failed to create new '".concat(syncConfig.stripeResourceType, "' resource in Stripe: ").concat(msg));
            case 9: return [2 /*return*/, dataRef];
        }
    });
}); };
exports.createNewInStripe = createNewInStripe;
//# sourceMappingURL=createNewInStripe.js.map