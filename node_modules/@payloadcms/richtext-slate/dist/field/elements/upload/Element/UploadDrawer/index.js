"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "UploadDrawer", {
    enumerable: true,
    get: function() {
        return UploadDrawer;
    }
});
const _modal = require("@faceless-ui/modal");
const _elements = require("payload/components/elements");
const _forms = require("payload/components/forms");
const _utilities = require("payload/components/utilities");
const _config = require("payload/config");
const _utilities1 = require("payload/utilities");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _slate = require("slate");
const _slatereact = require("slate-react");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const UploadDrawer = (props)=>{
    const editor = (0, _slatereact.useSlateStatic)();
    const { drawerSlug, element, fieldProps, relatedCollection } = props;
    const { i18n, t } = (0, _reacti18next.useTranslation)();
    const { code: locale } = (0, _utilities.useLocale)();
    const { user } = (0, _utilities.useAuth)();
    const { closeModal } = (0, _modal.useModal)();
    const { getDocPreferences } = (0, _utilities.useDocumentInfo)();
    const [initialState, setInitialState] = (0, _react.useState)({});
    const fieldSchemaUnsanitized = fieldProps?.admin?.upload?.collections?.[relatedCollection.slug]?.fields;
    const config = (0, _utilities.useConfig)();
    // Sanitize custom fields here
    const validRelationships = config.collections.map((c)=>c.slug) || [];
    const fieldSchema = (0, _config.sanitizeFields)({
        config: config,
        fields: fieldSchemaUnsanitized,
        validRelationships
    });
    const handleUpdateEditData = (0, _react.useCallback)((_, data)=>{
        const newNode = {
            fields: data
        };
        const elementPath = _slatereact.ReactEditor.findPath(editor, element);
        _slate.Transforms.setNodes(editor, newNode, {
            at: elementPath
        });
        closeModal(drawerSlug);
    }, [
        closeModal,
        editor,
        element,
        drawerSlug
    ]);
    (0, _react.useEffect)(()=>{
        // Sanitize custom fields here
        const validRelationships = config.collections.map((c)=>c.slug) || [];
        const fieldSchema = (0, _config.sanitizeFields)({
            config: config,
            fields: fieldSchemaUnsanitized,
            validRelationships
        });
        const awaitInitialState = async ()=>{
            const preferences = await getDocPreferences();
            const state = await (0, _utilities.buildStateFromSchema)({
                config,
                data: (0, _utilities1.deepCopyObject)(element?.fields || {}),
                fieldSchema,
                locale,
                operation: 'update',
                preferences,
                t,
                user
            });
            setInitialState(state);
        };
        awaitInitialState();
    }, [
        fieldSchemaUnsanitized,
        config,
        element.fields,
        user,
        locale,
        t,
        getDocPreferences
    ]);
    return /*#__PURE__*/ _react.default.createElement(_elements.Drawer, {
        slug: drawerSlug,
        title: t('general:editLabel', {
            label: (0, _utilities1.getTranslation)(relatedCollection.labels.singular, i18n)
        })
    }, /*#__PURE__*/ _react.default.createElement(_forms.Form, {
        initialState: initialState,
        onSubmit: handleUpdateEditData
    }, /*#__PURE__*/ _react.default.createElement(_forms.RenderFields, {
        fieldSchema: fieldSchema,
        fieldTypes: _forms.fieldTypes,
        readOnly: false
    }), /*#__PURE__*/ _react.default.createElement(_forms.FormSubmit, null, t('fields:saveChanges'))));
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9maWVsZC9lbGVtZW50cy91cGxvYWQvRWxlbWVudC9VcGxvYWREcmF3ZXIvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZyB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5cbmltcG9ydCB7IHVzZU1vZGFsIH0gZnJvbSAnQGZhY2VsZXNzLXVpL21vZGFsJ1xuaW1wb3J0IHsgRHJhd2VyIH0gZnJvbSAncGF5bG9hZC9jb21wb25lbnRzL2VsZW1lbnRzJ1xuaW1wb3J0IHsgRm9ybSwgRm9ybVN1Ym1pdCwgUmVuZGVyRmllbGRzLCBmaWVsZFR5cGVzIH0gZnJvbSAncGF5bG9hZC9jb21wb25lbnRzL2Zvcm1zJ1xuaW1wb3J0IHtcbiAgYnVpbGRTdGF0ZUZyb21TY2hlbWEsXG4gIHVzZUF1dGgsXG4gIHVzZUNvbmZpZyxcbiAgdXNlRG9jdW1lbnRJbmZvLFxuICB1c2VMb2NhbGUsXG59IGZyb20gJ3BheWxvYWQvY29tcG9uZW50cy91dGlsaXRpZXMnXG5pbXBvcnQgeyBzYW5pdGl6ZUZpZWxkcyB9IGZyb20gJ3BheWxvYWQvY29uZmlnJ1xuaW1wb3J0IHsgZGVlcENvcHlPYmplY3QsIGdldFRyYW5zbGF0aW9uIH0gZnJvbSAncGF5bG9hZC91dGlsaXRpZXMnXG5pbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAncmVhY3QtaTE4bmV4dCdcbmltcG9ydCB7IFRyYW5zZm9ybXMgfSBmcm9tICdzbGF0ZSdcbmltcG9ydCB7IFJlYWN0RWRpdG9yLCB1c2VTbGF0ZVN0YXRpYyB9IGZyb20gJ3NsYXRlLXJlYWN0J1xuXG5pbXBvcnQgdHlwZSB7IEVsZW1lbnRQcm9wcyB9IGZyb20gJy4uJ1xuXG5leHBvcnQgY29uc3QgVXBsb2FkRHJhd2VyOiBSZWFjdC5GQzxcbiAgRWxlbWVudFByb3BzICYge1xuICAgIGRyYXdlclNsdWc6IHN0cmluZ1xuICAgIHJlbGF0ZWRDb2xsZWN0aW9uOiBTYW5pdGl6ZWRDb2xsZWN0aW9uQ29uZmlnXG4gIH1cbj4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgZWRpdG9yID0gdXNlU2xhdGVTdGF0aWMoKVxuXG4gIGNvbnN0IHsgZHJhd2VyU2x1ZywgZWxlbWVudCwgZmllbGRQcm9wcywgcmVsYXRlZENvbGxlY3Rpb24gfSA9IHByb3BzXG5cbiAgY29uc3QgeyBpMThuLCB0IH0gPSB1c2VUcmFuc2xhdGlvbigpXG4gIGNvbnN0IHsgY29kZTogbG9jYWxlIH0gPSB1c2VMb2NhbGUoKVxuICBjb25zdCB7IHVzZXIgfSA9IHVzZUF1dGgoKVxuICBjb25zdCB7IGNsb3NlTW9kYWwgfSA9IHVzZU1vZGFsKClcbiAgY29uc3QgeyBnZXREb2NQcmVmZXJlbmNlcyB9ID0gdXNlRG9jdW1lbnRJbmZvKClcbiAgY29uc3QgW2luaXRpYWxTdGF0ZSwgc2V0SW5pdGlhbFN0YXRlXSA9IHVzZVN0YXRlKHt9KVxuICBjb25zdCBmaWVsZFNjaGVtYVVuc2FuaXRpemVkID1cbiAgICBmaWVsZFByb3BzPy5hZG1pbj8udXBsb2FkPy5jb2xsZWN0aW9ucz8uW3JlbGF0ZWRDb2xsZWN0aW9uLnNsdWddPy5maWVsZHNcbiAgY29uc3QgY29uZmlnID0gdXNlQ29uZmlnKClcblxuICAvLyBTYW5pdGl6ZSBjdXN0b20gZmllbGRzIGhlcmVcbiAgY29uc3QgdmFsaWRSZWxhdGlvbnNoaXBzID0gY29uZmlnLmNvbGxlY3Rpb25zLm1hcCgoYykgPT4gYy5zbHVnKSB8fCBbXVxuICBjb25zdCBmaWVsZFNjaGVtYSA9IHNhbml0aXplRmllbGRzKHtcbiAgICBjb25maWc6IGNvbmZpZyxcbiAgICBmaWVsZHM6IGZpZWxkU2NoZW1hVW5zYW5pdGl6ZWQsXG4gICAgdmFsaWRSZWxhdGlvbnNoaXBzLFxuICB9KVxuXG4gIGNvbnN0IGhhbmRsZVVwZGF0ZUVkaXREYXRhID0gdXNlQ2FsbGJhY2soXG4gICAgKF8sIGRhdGEpID0+IHtcbiAgICAgIGNvbnN0IG5ld05vZGUgPSB7XG4gICAgICAgIGZpZWxkczogZGF0YSxcbiAgICAgIH1cblxuICAgICAgY29uc3QgZWxlbWVudFBhdGggPSBSZWFjdEVkaXRvci5maW5kUGF0aChlZGl0b3IsIGVsZW1lbnQpXG5cbiAgICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCBuZXdOb2RlLCB7IGF0OiBlbGVtZW50UGF0aCB9KVxuICAgICAgY2xvc2VNb2RhbChkcmF3ZXJTbHVnKVxuICAgIH0sXG4gICAgW2Nsb3NlTW9kYWwsIGVkaXRvciwgZWxlbWVudCwgZHJhd2VyU2x1Z10sXG4gIClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFNhbml0aXplIGN1c3RvbSBmaWVsZHMgaGVyZVxuICAgIGNvbnN0IHZhbGlkUmVsYXRpb25zaGlwcyA9IGNvbmZpZy5jb2xsZWN0aW9ucy5tYXAoKGMpID0+IGMuc2x1ZykgfHwgW11cbiAgICBjb25zdCBmaWVsZFNjaGVtYSA9IHNhbml0aXplRmllbGRzKHtcbiAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgZmllbGRzOiBmaWVsZFNjaGVtYVVuc2FuaXRpemVkLFxuICAgICAgdmFsaWRSZWxhdGlvbnNoaXBzLFxuICAgIH0pXG5cbiAgICBjb25zdCBhd2FpdEluaXRpYWxTdGF0ZSA9IGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHByZWZlcmVuY2VzID0gYXdhaXQgZ2V0RG9jUHJlZmVyZW5jZXMoKVxuICAgICAgY29uc3Qgc3RhdGUgPSBhd2FpdCBidWlsZFN0YXRlRnJvbVNjaGVtYSh7XG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgZGF0YTogZGVlcENvcHlPYmplY3QoZWxlbWVudD8uZmllbGRzIHx8IHt9KSxcbiAgICAgICAgZmllbGRTY2hlbWEsXG4gICAgICAgIGxvY2FsZSxcbiAgICAgICAgb3BlcmF0aW9uOiAndXBkYXRlJyxcbiAgICAgICAgcHJlZmVyZW5jZXMsXG4gICAgICAgIHQsXG4gICAgICAgIHVzZXIsXG4gICAgICB9KVxuICAgICAgc2V0SW5pdGlhbFN0YXRlKHN0YXRlKVxuICAgIH1cblxuICAgIGF3YWl0SW5pdGlhbFN0YXRlKClcbiAgfSwgW2ZpZWxkU2NoZW1hVW5zYW5pdGl6ZWQsIGNvbmZpZywgZWxlbWVudC5maWVsZHMsIHVzZXIsIGxvY2FsZSwgdCwgZ2V0RG9jUHJlZmVyZW5jZXNdKVxuXG4gIHJldHVybiAoXG4gICAgPERyYXdlclxuICAgICAgc2x1Zz17ZHJhd2VyU2x1Z31cbiAgICAgIHRpdGxlPXt0KCdnZW5lcmFsOmVkaXRMYWJlbCcsIHtcbiAgICAgICAgbGFiZWw6IGdldFRyYW5zbGF0aW9uKHJlbGF0ZWRDb2xsZWN0aW9uLmxhYmVscy5zaW5ndWxhciwgaTE4biksXG4gICAgICB9KX1cbiAgICA+XG4gICAgICA8Rm9ybSBpbml0aWFsU3RhdGU9e2luaXRpYWxTdGF0ZX0gb25TdWJtaXQ9e2hhbmRsZVVwZGF0ZUVkaXREYXRhfT5cbiAgICAgICAgPFJlbmRlckZpZWxkcyBmaWVsZFNjaGVtYT17ZmllbGRTY2hlbWF9IGZpZWxkVHlwZXM9e2ZpZWxkVHlwZXN9IHJlYWRPbmx5PXtmYWxzZX0gLz5cbiAgICAgICAgPEZvcm1TdWJtaXQ+e3QoJ2ZpZWxkczpzYXZlQ2hhbmdlcycpfTwvRm9ybVN1Ym1pdD5cbiAgICAgIDwvRm9ybT5cbiAgICA8L0RyYXdlcj5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIlVwbG9hZERyYXdlciIsInByb3BzIiwiZWRpdG9yIiwidXNlU2xhdGVTdGF0aWMiLCJkcmF3ZXJTbHVnIiwiZWxlbWVudCIsImZpZWxkUHJvcHMiLCJyZWxhdGVkQ29sbGVjdGlvbiIsImkxOG4iLCJ0IiwidXNlVHJhbnNsYXRpb24iLCJjb2RlIiwibG9jYWxlIiwidXNlTG9jYWxlIiwidXNlciIsInVzZUF1dGgiLCJjbG9zZU1vZGFsIiwidXNlTW9kYWwiLCJnZXREb2NQcmVmZXJlbmNlcyIsInVzZURvY3VtZW50SW5mbyIsImluaXRpYWxTdGF0ZSIsInNldEluaXRpYWxTdGF0ZSIsInVzZVN0YXRlIiwiZmllbGRTY2hlbWFVbnNhbml0aXplZCIsImFkbWluIiwidXBsb2FkIiwiY29sbGVjdGlvbnMiLCJzbHVnIiwiZmllbGRzIiwiY29uZmlnIiwidXNlQ29uZmlnIiwidmFsaWRSZWxhdGlvbnNoaXBzIiwibWFwIiwiYyIsImZpZWxkU2NoZW1hIiwic2FuaXRpemVGaWVsZHMiLCJoYW5kbGVVcGRhdGVFZGl0RGF0YSIsInVzZUNhbGxiYWNrIiwiXyIsImRhdGEiLCJuZXdOb2RlIiwiZWxlbWVudFBhdGgiLCJSZWFjdEVkaXRvciIsImZpbmRQYXRoIiwiVHJhbnNmb3JtcyIsInNldE5vZGVzIiwiYXQiLCJ1c2VFZmZlY3QiLCJhd2FpdEluaXRpYWxTdGF0ZSIsInByZWZlcmVuY2VzIiwic3RhdGUiLCJidWlsZFN0YXRlRnJvbVNjaGVtYSIsImRlZXBDb3B5T2JqZWN0Iiwib3BlcmF0aW9uIiwiRHJhd2VyIiwidGl0bGUiLCJsYWJlbCIsImdldFRyYW5zbGF0aW9uIiwibGFiZWxzIiwic2luZ3VsYXIiLCJGb3JtIiwib25TdWJtaXQiLCJSZW5kZXJGaWVsZHMiLCJmaWVsZFR5cGVzIiwicmVhZE9ubHkiLCJGb3JtU3VibWl0Il0sIm1hcHBpbmdzIjoiOzs7OytCQXFCYUE7OztlQUFBQTs7O3VCQW5CWTswQkFDRjt1QkFDb0M7MkJBT3BEO3dCQUN3Qjs0QkFDZ0I7K0RBQ1M7OEJBQ3pCO3VCQUNKOzRCQUNpQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUlyQyxNQUFNQSxlQUtULENBQUNDO0lBQ0gsTUFBTUMsU0FBU0MsSUFBQUEsMEJBQWM7SUFFN0IsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxpQkFBaUIsRUFBRSxHQUFHTjtJQUUvRCxNQUFNLEVBQUVPLElBQUksRUFBRUMsQ0FBQyxFQUFFLEdBQUdDLElBQUFBLDRCQUFjO0lBQ2xDLE1BQU0sRUFBRUMsTUFBTUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLG9CQUFTO0lBQ2xDLE1BQU0sRUFBRUMsSUFBSSxFQUFFLEdBQUdDLElBQUFBLGtCQUFPO0lBQ3hCLE1BQU0sRUFBRUMsVUFBVSxFQUFFLEdBQUdDLElBQUFBLGVBQVE7SUFDL0IsTUFBTSxFQUFFQyxpQkFBaUIsRUFBRSxHQUFHQyxJQUFBQSwwQkFBZTtJQUM3QyxNQUFNLENBQUNDLGNBQWNDLGdCQUFnQixHQUFHQyxJQUFBQSxlQUFRLEVBQUMsQ0FBQztJQUNsRCxNQUFNQyx5QkFDSmpCLFlBQVlrQixPQUFPQyxRQUFRQyxhQUFhLENBQUNuQixrQkFBa0JvQixJQUFJLENBQUMsRUFBRUM7SUFDcEUsTUFBTUMsU0FBU0MsSUFBQUEsb0JBQVM7SUFFeEIsOEJBQThCO0lBQzlCLE1BQU1DLHFCQUFxQkYsT0FBT0gsV0FBVyxDQUFDTSxHQUFHLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRU4sSUFBSSxLQUFLLEVBQUU7SUFDdEUsTUFBTU8sY0FBY0MsSUFBQUEsc0JBQWMsRUFBQztRQUNqQ04sUUFBUUE7UUFDUkQsUUFBUUw7UUFDUlE7SUFDRjtJQUVBLE1BQU1LLHVCQUF1QkMsSUFBQUEsa0JBQVcsRUFDdEMsQ0FBQ0MsR0FBR0M7UUFDRixNQUFNQyxVQUFVO1lBQ2RaLFFBQVFXO1FBQ1Y7UUFFQSxNQUFNRSxjQUFjQyx1QkFBVyxDQUFDQyxRQUFRLENBQUN6QyxRQUFRRztRQUVqRHVDLGlCQUFVLENBQUNDLFFBQVEsQ0FBQzNDLFFBQVFzQyxTQUFTO1lBQUVNLElBQUlMO1FBQVk7UUFDdkR6QixXQUFXWjtJQUNiLEdBQ0E7UUFBQ1k7UUFBWWQ7UUFBUUc7UUFBU0Q7S0FBVztJQUczQzJDLElBQUFBLGdCQUFTLEVBQUM7UUFDUiw4QkFBOEI7UUFDOUIsTUFBTWhCLHFCQUFxQkYsT0FBT0gsV0FBVyxDQUFDTSxHQUFHLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRU4sSUFBSSxLQUFLLEVBQUU7UUFDdEUsTUFBTU8sY0FBY0MsSUFBQUEsc0JBQWMsRUFBQztZQUNqQ04sUUFBUUE7WUFDUkQsUUFBUUw7WUFDUlE7UUFDRjtRQUVBLE1BQU1pQixvQkFBb0I7WUFDeEIsTUFBTUMsY0FBYyxNQUFNL0I7WUFDMUIsTUFBTWdDLFFBQVEsTUFBTUMsSUFBQUEsK0JBQW9CLEVBQUM7Z0JBQ3ZDdEI7Z0JBQ0FVLE1BQU1hLElBQUFBLDBCQUFjLEVBQUMvQyxTQUFTdUIsVUFBVSxDQUFDO2dCQUN6Q007Z0JBQ0F0QjtnQkFDQXlDLFdBQVc7Z0JBQ1hKO2dCQUNBeEM7Z0JBQ0FLO1lBQ0Y7WUFDQU8sZ0JBQWdCNkI7UUFDbEI7UUFFQUY7SUFDRixHQUFHO1FBQUN6QjtRQUF3Qk07UUFBUXhCLFFBQVF1QixNQUFNO1FBQUVkO1FBQU1GO1FBQVFIO1FBQUdTO0tBQWtCO0lBRXZGLHFCQUNFLDZCQUFDb0MsZ0JBQU07UUFDTDNCLE1BQU12QjtRQUNObUQsT0FBTzlDLEVBQUUscUJBQXFCO1lBQzVCK0MsT0FBT0MsSUFBQUEsMEJBQWMsRUFBQ2xELGtCQUFrQm1ELE1BQU0sQ0FBQ0MsUUFBUSxFQUFFbkQ7UUFDM0Q7cUJBRUEsNkJBQUNvRCxXQUFJO1FBQUN4QyxjQUFjQTtRQUFjeUMsVUFBVXpCO3FCQUMxQyw2QkFBQzBCLG1CQUFZO1FBQUM1QixhQUFhQTtRQUFhNkIsWUFBWUEsaUJBQVU7UUFBRUMsVUFBVTtzQkFDMUUsNkJBQUNDLGlCQUFVLFFBQUV4RCxFQUFFO0FBSXZCIn0=