"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _components = require("payload/components");
const _elements = require("payload/components/elements");
const _hooks = require("payload/components/hooks");
const _utilities = require("payload/components/utilities");
const _utilities1 = require("payload/utilities");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _slate = require("slate");
const _slatereact = require("slate-react");
const _EnabledRelationshipsCondition = require("../../EnabledRelationshipsCondition");
require("./index.scss");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'rich-text-relationship';
const initialParams = {
    depth: 0
};
const Element = (props)=>{
    const { attributes, children, element, element: { relationTo, value }, fieldProps } = props;
    const { collections, routes: { api }, serverURL } = (0, _utilities.useConfig)();
    const [enabledCollectionSlugs] = (0, _react.useState)(()=>collections.filter(({ admin: { enableRichTextRelationship } })=>enableRichTextRelationship).map(({ slug })=>slug));
    const [relatedCollection, setRelatedCollection] = (0, _react.useState)(()=>collections.find((coll)=>coll.slug === relationTo));
    const selected = (0, _slatereact.useSelected)();
    const focused = (0, _slatereact.useFocused)();
    const { i18n, t } = (0, _reacti18next.useTranslation)([
        'fields',
        'general'
    ]);
    const editor = (0, _slatereact.useSlateStatic)();
    const [cacheBust, dispatchCacheBust] = (0, _react.useReducer)((state)=>state + 1, 0);
    const [{ data }, { setParams }] = (0, _hooks.usePayloadAPI)(`${serverURL}${api}/${relatedCollection.slug}/${value?.id}`, {
        initialParams
    });
    const [DocumentDrawer, DocumentDrawerToggler, { closeDrawer }] = (0, _elements.useDocumentDrawer)({
        id: value?.id,
        collectionSlug: relatedCollection.slug
    });
    const [ListDrawer, ListDrawerToggler, { closeDrawer: closeListDrawer }] = (0, _elements.useListDrawer)({
        collectionSlugs: enabledCollectionSlugs,
        selectedCollection: relatedCollection.slug
    });
    const removeRelationship = (0, _react.useCallback)(()=>{
        const elementPath = _slatereact.ReactEditor.findPath(editor, element);
        _slate.Transforms.removeNodes(editor, {
            at: elementPath
        });
    }, [
        editor,
        element
    ]);
    const updateRelationship = _react.default.useCallback(({ doc })=>{
        const elementPath = _slatereact.ReactEditor.findPath(editor, element);
        _slate.Transforms.setNodes(editor, {
            children: [
                {
                    text: ' '
                }
            ],
            relationTo: relatedCollection.slug,
            type: 'relationship',
            value: {
                id: doc.id
            }
        }, {
            at: elementPath
        });
        setParams({
            ...initialParams,
            cacheBust
        });
        closeDrawer();
        dispatchCacheBust();
    }, [
        editor,
        element,
        relatedCollection,
        cacheBust,
        setParams,
        closeDrawer
    ]);
    const swapRelationship = _react.default.useCallback(({ collectionConfig, docID })=>{
        const elementPath = _slatereact.ReactEditor.findPath(editor, element);
        _slate.Transforms.setNodes(editor, {
            children: [
                {
                    text: ' '
                }
            ],
            relationTo: collectionConfig.slug,
            type: 'relationship',
            value: {
                id: docID
            }
        }, {
            at: elementPath
        });
        setRelatedCollection(collections.find((coll)=>coll.slug === collectionConfig.slug));
        setParams({
            ...initialParams,
            cacheBust
        });
        closeListDrawer();
        dispatchCacheBust();
    }, [
        closeListDrawer,
        editor,
        element,
        cacheBust,
        setParams,
        collections
    ]);
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            baseClass,
            selected && focused && `${baseClass}--selected`
        ].filter(Boolean).join(' '),
        contentEditable: false,
        ...attributes
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__wrap`
    }, /*#__PURE__*/ _react.default.createElement("p", {
        className: `${baseClass}__label`
    }, t('labelRelationship', {
        label: (0, _utilities1.getTranslation)(relatedCollection.labels.singular, i18n)
    })), /*#__PURE__*/ _react.default.createElement(DocumentDrawerToggler, {
        className: `${baseClass}__doc-drawer-toggler`
    }, /*#__PURE__*/ _react.default.createElement("p", {
        className: `${baseClass}__title`
    }, data[relatedCollection?.admin?.useAsTitle || 'id']))), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__actions`
    }, /*#__PURE__*/ _react.default.createElement(ListDrawerToggler, {
        className: `${baseClass}__list-drawer-toggler`,
        disabled: fieldProps?.admin?.readOnly
    }, /*#__PURE__*/ _react.default.createElement(_components.Button, {
        buttonStyle: "icon-label",
        disabled: fieldProps?.admin?.readOnly,
        el: "div",
        icon: "swap",
        onClick: ()=>{
        // do nothing
        },
        round: true,
        tooltip: t('swapRelationship')
    })), /*#__PURE__*/ _react.default.createElement(_components.Button, {
        buttonStyle: "icon-label",
        className: `${baseClass}__removeButton`,
        disabled: fieldProps?.admin?.readOnly,
        icon: "x",
        onClick: (e)=>{
            e.preventDefault();
            removeRelationship();
        },
        round: true,
        tooltip: t('fields:removeRelationship')
    })), value?.id && /*#__PURE__*/ _react.default.createElement(DocumentDrawer, {
        onSave: updateRelationship
    }), /*#__PURE__*/ _react.default.createElement(ListDrawer, {
        onSelect: swapRelationship
    }), children);
};
const _default = (props)=>{
    return /*#__PURE__*/ _react.default.createElement(_EnabledRelationshipsCondition.EnabledRelationshipsCondition, props, /*#__PURE__*/ _react.default.createElement(Element, props));
};

//# sourceMappingURL=data:application/json;base64,