"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    slateEditor: function() {
        return slateEditor;
    },
    ElementButton: function() {
        return _Button.default;
    },
    toggleElement: function() {
        return _toggle.default;
    },
    LeafButton: function() {
        return _Button1.default;
    },
    nodeIsTextNode: function() {
        return _types.nodeIsTextNode;
    }
});
const _utilities = require("payload/utilities");
const _cell = /*#__PURE__*/ _interop_require_default(require("./cell"));
const _richTextRelationshipPromise = require("./data/richTextRelationshipPromise");
const _validation = require("./data/validation");
const _field = /*#__PURE__*/ _interop_require_default(require("./field"));
const _Button = /*#__PURE__*/ _interop_require_default(require("./field/elements/Button"));
const _toggle = /*#__PURE__*/ _interop_require_default(require("./field/elements/toggle"));
const _Button1 = /*#__PURE__*/ _interop_require_default(require("./field/leaves/Button"));
const _types = require("./types");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function slateEditor(args) {
    return {
        CellComponent: (0, _utilities.withMergedProps)({
            Component: _cell.default,
            toMergeIntoProps: args
        }),
        FieldComponent: (0, _utilities.withMergedProps)({
            Component: _field.default,
            toMergeIntoProps: args
        }),
        outputSchema: ({ isRequired })=>{
            return {
                items: {
                    type: 'object'
                },
                type: (0, _utilities.withNullableJSONSchemaType)('array', isRequired)
            };
        },
        populationPromise ({ currentDepth, depth, field, overrideAccess, req, showHiddenFields, siblingDoc }) {
            if (field.admin?.elements?.includes('relationship') || field.admin?.elements?.includes('upload') || field.admin?.elements?.includes('link') || !field?.admin?.elements) {
                return (0, _richTextRelationshipPromise.richTextRelationshipPromise)({
                    currentDepth,
                    depth,
                    field,
                    overrideAccess,
                    req,
                    showHiddenFields,
                    siblingDoc
                });
            }
            return null;
        },
        validate: _validation.richTextValidate
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJpY2hUZXh0QWRhcHRlciB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5cbmltcG9ydCB7IHdpdGhNZXJnZWRQcm9wcywgd2l0aE51bGxhYmxlSlNPTlNjaGVtYVR5cGUgfSBmcm9tICdwYXlsb2FkL3V0aWxpdGllcydcblxuaW1wb3J0IHR5cGUgeyBBZGFwdGVyQXJndW1lbnRzIH0gZnJvbSAnLi90eXBlcydcblxuaW1wb3J0IFJpY2hUZXh0Q2VsbCBmcm9tICcuL2NlbGwnXG5pbXBvcnQgeyByaWNoVGV4dFJlbGF0aW9uc2hpcFByb21pc2UgfSBmcm9tICcuL2RhdGEvcmljaFRleHRSZWxhdGlvbnNoaXBQcm9taXNlJ1xuaW1wb3J0IHsgcmljaFRleHRWYWxpZGF0ZSB9IGZyb20gJy4vZGF0YS92YWxpZGF0aW9uJ1xuaW1wb3J0IFJpY2hUZXh0RmllbGQgZnJvbSAnLi9maWVsZCdcblxuZXhwb3J0IGZ1bmN0aW9uIHNsYXRlRWRpdG9yKFxuICBhcmdzOiBBZGFwdGVyQXJndW1lbnRzLFxuKTogUmljaFRleHRBZGFwdGVyPGFueVtdLCBBZGFwdGVyQXJndW1lbnRzLCBBZGFwdGVyQXJndW1lbnRzPiB7XG4gIHJldHVybiB7XG4gICAgQ2VsbENvbXBvbmVudDogd2l0aE1lcmdlZFByb3BzKHtcbiAgICAgIENvbXBvbmVudDogUmljaFRleHRDZWxsLFxuICAgICAgdG9NZXJnZUludG9Qcm9wczogYXJncyxcbiAgICB9KSxcbiAgICBGaWVsZENvbXBvbmVudDogd2l0aE1lcmdlZFByb3BzKHtcbiAgICAgIENvbXBvbmVudDogUmljaFRleHRGaWVsZCxcbiAgICAgIHRvTWVyZ2VJbnRvUHJvcHM6IGFyZ3MsXG4gICAgfSksXG4gICAgb3V0cHV0U2NoZW1hOiAoeyBpc1JlcXVpcmVkIH0pID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGl0ZW1zOiB7XG4gICAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgIH0sXG4gICAgICAgIHR5cGU6IHdpdGhOdWxsYWJsZUpTT05TY2hlbWFUeXBlKCdhcnJheScsIGlzUmVxdWlyZWQpLFxuICAgICAgfVxuICAgIH0sXG4gICAgcG9wdWxhdGlvblByb21pc2Uoe1xuICAgICAgY3VycmVudERlcHRoLFxuICAgICAgZGVwdGgsXG4gICAgICBmaWVsZCxcbiAgICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgICAgcmVxLFxuICAgICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICAgIHNpYmxpbmdEb2MsXG4gICAgfSkge1xuICAgICAgaWYgKFxuICAgICAgICBmaWVsZC5hZG1pbj8uZWxlbWVudHM/LmluY2x1ZGVzKCdyZWxhdGlvbnNoaXAnKSB8fFxuICAgICAgICBmaWVsZC5hZG1pbj8uZWxlbWVudHM/LmluY2x1ZGVzKCd1cGxvYWQnKSB8fFxuICAgICAgICBmaWVsZC5hZG1pbj8uZWxlbWVudHM/LmluY2x1ZGVzKCdsaW5rJykgfHxcbiAgICAgICAgIWZpZWxkPy5hZG1pbj8uZWxlbWVudHNcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gcmljaFRleHRSZWxhdGlvbnNoaXBQcm9taXNlKHtcbiAgICAgICAgICBjdXJyZW50RGVwdGgsXG4gICAgICAgICAgZGVwdGgsXG4gICAgICAgICAgZmllbGQsXG4gICAgICAgICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgICAgICAgcmVxLFxuICAgICAgICAgIHNob3dIaWRkZW5GaWVsZHMsXG4gICAgICAgICAgc2libGluZ0RvYyxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsXG4gICAgfSxcbiAgICB2YWxpZGF0ZTogcmljaFRleHRWYWxpZGF0ZSxcbiAgfVxufVxuXG5leHBvcnQgeyBkZWZhdWx0IGFzIEVsZW1lbnRCdXR0b24gfSBmcm9tICcuL2ZpZWxkL2VsZW1lbnRzL0J1dHRvbidcblxuZXhwb3J0IHsgZGVmYXVsdCBhcyB0b2dnbGVFbGVtZW50IH0gZnJvbSAnLi9maWVsZC9lbGVtZW50cy90b2dnbGUnXG5leHBvcnQgeyBkZWZhdWx0IGFzIExlYWZCdXR0b24gfSBmcm9tICcuL2ZpZWxkL2xlYXZlcy9CdXR0b24nXG5leHBvcnQgdHlwZSB7XG4gIEFkYXB0ZXJBcmd1bWVudHMsXG4gIEVsZW1lbnROb2RlLFxuICBGaWVsZFByb3BzLFxuICBSaWNoVGV4dEN1c3RvbUVsZW1lbnQsXG4gIFJpY2hUZXh0Q3VzdG9tTGVhZixcbiAgUmljaFRleHRFbGVtZW50LFxuICBSaWNoVGV4dExlYWYsXG4gIFRleHROb2RlLFxufSBmcm9tICcuL3R5cGVzJ1xuXG5leHBvcnQgeyBub2RlSXNUZXh0Tm9kZSB9IGZyb20gJy4vdHlwZXMnXG4iXSwibmFtZXMiOlsic2xhdGVFZGl0b3IiLCJFbGVtZW50QnV0dG9uIiwidG9nZ2xlRWxlbWVudCIsIkxlYWZCdXR0b24iLCJub2RlSXNUZXh0Tm9kZSIsImFyZ3MiLCJDZWxsQ29tcG9uZW50Iiwid2l0aE1lcmdlZFByb3BzIiwiQ29tcG9uZW50IiwiUmljaFRleHRDZWxsIiwidG9NZXJnZUludG9Qcm9wcyIsIkZpZWxkQ29tcG9uZW50IiwiUmljaFRleHRGaWVsZCIsIm91dHB1dFNjaGVtYSIsImlzUmVxdWlyZWQiLCJpdGVtcyIsInR5cGUiLCJ3aXRoTnVsbGFibGVKU09OU2NoZW1hVHlwZSIsInBvcHVsYXRpb25Qcm9taXNlIiwiY3VycmVudERlcHRoIiwiZGVwdGgiLCJmaWVsZCIsIm92ZXJyaWRlQWNjZXNzIiwicmVxIiwic2hvd0hpZGRlbkZpZWxkcyIsInNpYmxpbmdEb2MiLCJhZG1pbiIsImVsZW1lbnRzIiwiaW5jbHVkZXMiLCJyaWNoVGV4dFJlbGF0aW9uc2hpcFByb21pc2UiLCJ2YWxpZGF0ZSIsInJpY2hUZXh0VmFsaWRhdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBV2dCQSxXQUFXO2VBQVhBOztJQW1ESUMsYUFBYTtlQUFiQSxlQUFhOztJQUViQyxhQUFhO2VBQWJBLGVBQWE7O0lBQ2JDLFVBQVU7ZUFBVkEsZ0JBQVU7O0lBWXJCQyxjQUFjO2VBQWRBLHFCQUFjOzs7MkJBM0VxQzs2REFJbkM7NkNBQ21COzRCQUNYOzhEQUNQOytEQXFEZTsrREFFQTtnRUFDSDt1QkFZUDs7Ozs7O0FBbEV4QixTQUFTSixZQUNkSyxJQUFzQjtJQUV0QixPQUFPO1FBQ0xDLGVBQWVDLElBQUFBLDBCQUFlLEVBQUM7WUFDN0JDLFdBQVdDLGFBQVk7WUFDdkJDLGtCQUFrQkw7UUFDcEI7UUFDQU0sZ0JBQWdCSixJQUFBQSwwQkFBZSxFQUFDO1lBQzlCQyxXQUFXSSxjQUFhO1lBQ3hCRixrQkFBa0JMO1FBQ3BCO1FBQ0FRLGNBQWMsQ0FBQyxFQUFFQyxVQUFVLEVBQUU7WUFDM0IsT0FBTztnQkFDTEMsT0FBTztvQkFDTEMsTUFBTTtnQkFDUjtnQkFDQUEsTUFBTUMsSUFBQUEscUNBQTBCLEVBQUMsU0FBU0g7WUFDNUM7UUFDRjtRQUNBSSxtQkFBa0IsRUFDaEJDLFlBQVksRUFDWkMsS0FBSyxFQUNMQyxLQUFLLEVBQ0xDLGNBQWMsRUFDZEMsR0FBRyxFQUNIQyxnQkFBZ0IsRUFDaEJDLFVBQVUsRUFDWDtZQUNDLElBQ0VKLE1BQU1LLEtBQUssRUFBRUMsVUFBVUMsU0FBUyxtQkFDaENQLE1BQU1LLEtBQUssRUFBRUMsVUFBVUMsU0FBUyxhQUNoQ1AsTUFBTUssS0FBSyxFQUFFQyxVQUFVQyxTQUFTLFdBQ2hDLENBQUNQLE9BQU9LLE9BQU9DLFVBQ2Y7Z0JBQ0EsT0FBT0UsSUFBQUEsd0RBQTJCLEVBQUM7b0JBQ2pDVjtvQkFDQUM7b0JBQ0FDO29CQUNBQztvQkFDQUM7b0JBQ0FDO29CQUNBQztnQkFDRjtZQUNGO1lBQ0EsT0FBTztRQUNUO1FBQ0FLLFVBQVVDLDRCQUFnQjtJQUM1QjtBQUNGIn0=