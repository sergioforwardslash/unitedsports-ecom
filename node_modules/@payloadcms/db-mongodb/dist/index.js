"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "mongooseAdapter", {
    enumerable: true,
    get: function() {
        return mongooseAdapter;
    }
});
const _mongoose = /*#__PURE__*/ _interop_require_default(require("mongoose"));
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _database = require("payload/database");
const _connect = require("./connect");
const _create = require("./create");
const _createGlobal = require("./createGlobal");
const _createGlobalVersion = require("./createGlobalVersion");
const _createMigration = require("./createMigration");
const _createVersion = require("./createVersion");
const _deleteMany = require("./deleteMany");
const _deleteOne = require("./deleteOne");
const _deleteVersions = require("./deleteVersions");
const _destroy = require("./destroy");
const _extendViteConfig = require("./extendViteConfig");
const _extendWebpackConfig = require("./extendWebpackConfig");
const _find = require("./find");
const _findGlobal = require("./findGlobal");
const _findGlobalVersions = require("./findGlobalVersions");
const _findOne = require("./findOne");
const _findVersions = require("./findVersions");
const _init = require("./init");
const _migrateFresh = require("./migrateFresh");
const _queryDrafts = require("./queryDrafts");
const _beginTransaction = require("./transactions/beginTransaction");
const _commitTransaction = require("./transactions/commitTransaction");
const _rollbackTransaction = require("./transactions/rollbackTransaction");
const _updateGlobal = require("./updateGlobal");
const _updateGlobalVersion = require("./updateGlobalVersion");
const _updateOne = require("./updateOne");
const _updateVersion = require("./updateVersion");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function mongooseAdapter({ autoPluralization = true, connectOptions, disableIndexHints = false, migrationDir: migrationDirArg, url }) {
    function adapter({ payload }) {
        const migrationDir = migrationDirArg || _path.default.resolve(process.cwd(), 'src/migrations');
        _mongoose.default.set('strictQuery', false);
        (0, _extendWebpackConfig.extendWebpackConfig)(payload.config);
        (0, _extendViteConfig.extendViteConfig)(payload.config);
        return (0, _database.createDatabaseAdapter)({
            name: 'mongoose',
            // Mongoose-specific
            autoPluralization,
            collections: {},
            connectOptions: connectOptions || {},
            connection: undefined,
            disableIndexHints,
            globals: undefined,
            mongoMemoryServer: undefined,
            sessions: {},
            url,
            versions: {},
            // DatabaseAdapter
            beginTransaction: _beginTransaction.beginTransaction,
            commitTransaction: _commitTransaction.commitTransaction,
            connect: _connect.connect,
            create: _create.create,
            createGlobal: _createGlobal.createGlobal,
            createGlobalVersion: _createGlobalVersion.createGlobalVersion,
            createMigration: _createMigration.createMigration,
            createVersion: _createVersion.createVersion,
            defaultIDType: 'text',
            deleteMany: _deleteMany.deleteMany,
            deleteOne: _deleteOne.deleteOne,
            deleteVersions: _deleteVersions.deleteVersions,
            destroy: _destroy.destroy,
            find: _find.find,
            findGlobal: _findGlobal.findGlobal,
            findGlobalVersions: _findGlobalVersions.findGlobalVersions,
            findOne: _findOne.findOne,
            findVersions: _findVersions.findVersions,
            init: _init.init,
            migrateFresh: _migrateFresh.migrateFresh,
            migrationDir,
            payload,
            queryDrafts: _queryDrafts.queryDrafts,
            rollbackTransaction: _rollbackTransaction.rollbackTransaction,
            updateGlobal: _updateGlobal.updateGlobal,
            updateGlobalVersion: _updateGlobalVersion.updateGlobalVersion,
            updateOne: _updateOne.updateOne,
            updateVersion: _updateVersion.updateVersion
        });
    }
    return adapter;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IENsaWVudFNlc3Npb24sIENvbm5lY3RPcHRpb25zLCBDb25uZWN0aW9uIH0gZnJvbSAnbW9uZ29vc2UnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWQgfSBmcm9tICdwYXlsb2FkJ1xuaW1wb3J0IHR5cGUgeyBCYXNlRGF0YWJhc2VBZGFwdGVyIH0gZnJvbSAncGF5bG9hZC9kYXRhYmFzZSdcblxuaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCB7IGNyZWF0ZURhdGFiYXNlQWRhcHRlciB9IGZyb20gJ3BheWxvYWQvZGF0YWJhc2UnXG5cbmV4cG9ydCB0eXBlIHsgTWlncmF0ZURvd25BcmdzLCBNaWdyYXRlVXBBcmdzIH0gZnJvbSAnLi90eXBlcydcblxuaW1wb3J0IHR5cGUgeyBDb2xsZWN0aW9uTW9kZWwsIEdsb2JhbE1vZGVsIH0gZnJvbSAnLi90eXBlcydcblxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJy4vY29ubmVjdCdcbmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJy4vY3JlYXRlJ1xuaW1wb3J0IHsgY3JlYXRlR2xvYmFsIH0gZnJvbSAnLi9jcmVhdGVHbG9iYWwnXG5pbXBvcnQgeyBjcmVhdGVHbG9iYWxWZXJzaW9uIH0gZnJvbSAnLi9jcmVhdGVHbG9iYWxWZXJzaW9uJ1xuaW1wb3J0IHsgY3JlYXRlTWlncmF0aW9uIH0gZnJvbSAnLi9jcmVhdGVNaWdyYXRpb24nXG5pbXBvcnQgeyBjcmVhdGVWZXJzaW9uIH0gZnJvbSAnLi9jcmVhdGVWZXJzaW9uJ1xuaW1wb3J0IHsgZGVsZXRlTWFueSB9IGZyb20gJy4vZGVsZXRlTWFueSdcbmltcG9ydCB7IGRlbGV0ZU9uZSB9IGZyb20gJy4vZGVsZXRlT25lJ1xuaW1wb3J0IHsgZGVsZXRlVmVyc2lvbnMgfSBmcm9tICcuL2RlbGV0ZVZlcnNpb25zJ1xuaW1wb3J0IHsgZGVzdHJveSB9IGZyb20gJy4vZGVzdHJveSdcbmltcG9ydCB7IGV4dGVuZFZpdGVDb25maWcgfSBmcm9tICcuL2V4dGVuZFZpdGVDb25maWcnXG5pbXBvcnQgeyBleHRlbmRXZWJwYWNrQ29uZmlnIH0gZnJvbSAnLi9leHRlbmRXZWJwYWNrQ29uZmlnJ1xuaW1wb3J0IHsgZmluZCB9IGZyb20gJy4vZmluZCdcbmltcG9ydCB7IGZpbmRHbG9iYWwgfSBmcm9tICcuL2ZpbmRHbG9iYWwnXG5pbXBvcnQgeyBmaW5kR2xvYmFsVmVyc2lvbnMgfSBmcm9tICcuL2ZpbmRHbG9iYWxWZXJzaW9ucydcbmltcG9ydCB7IGZpbmRPbmUgfSBmcm9tICcuL2ZpbmRPbmUnXG5pbXBvcnQgeyBmaW5kVmVyc2lvbnMgfSBmcm9tICcuL2ZpbmRWZXJzaW9ucydcbmltcG9ydCB7IGluaXQgfSBmcm9tICcuL2luaXQnXG5pbXBvcnQgeyBtaWdyYXRlRnJlc2ggfSBmcm9tICcuL21pZ3JhdGVGcmVzaCdcbmltcG9ydCB7IHF1ZXJ5RHJhZnRzIH0gZnJvbSAnLi9xdWVyeURyYWZ0cydcbmltcG9ydCB7IGJlZ2luVHJhbnNhY3Rpb24gfSBmcm9tICcuL3RyYW5zYWN0aW9ucy9iZWdpblRyYW5zYWN0aW9uJ1xuaW1wb3J0IHsgY29tbWl0VHJhbnNhY3Rpb24gfSBmcm9tICcuL3RyYW5zYWN0aW9ucy9jb21taXRUcmFuc2FjdGlvbidcbmltcG9ydCB7IHJvbGxiYWNrVHJhbnNhY3Rpb24gfSBmcm9tICcuL3RyYW5zYWN0aW9ucy9yb2xsYmFja1RyYW5zYWN0aW9uJ1xuaW1wb3J0IHsgdXBkYXRlR2xvYmFsIH0gZnJvbSAnLi91cGRhdGVHbG9iYWwnXG5pbXBvcnQgeyB1cGRhdGVHbG9iYWxWZXJzaW9uIH0gZnJvbSAnLi91cGRhdGVHbG9iYWxWZXJzaW9uJ1xuaW1wb3J0IHsgdXBkYXRlT25lIH0gZnJvbSAnLi91cGRhdGVPbmUnXG5pbXBvcnQgeyB1cGRhdGVWZXJzaW9uIH0gZnJvbSAnLi91cGRhdGVWZXJzaW9uJ1xuXG5leHBvcnQgaW50ZXJmYWNlIEFyZ3Mge1xuICAvKiogU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgYXV0by1wbHVyYWxpemF0aW9uIG9mIGNvbGxlY3Rpb24gbmFtZXMsIERlZmF1bHRzIHRvIHRydWUgKi9cbiAgYXV0b1BsdXJhbGl6YXRpb24/OiBib29sZWFuXG4gIC8qKiBFeHRyYSBjb25maWd1cmF0aW9uIG9wdGlvbnMgKi9cbiAgY29ubmVjdE9wdGlvbnM/OiBDb25uZWN0T3B0aW9ucyAmIHtcbiAgICAvKiogU2V0IGZhbHNlIHRvIGRpc2FibGUgJGZhY2V0IGFnZ3JlZ2F0aW9uIGluIG5vbi1zdXBwb3J0aW5nIGRhdGFiYXNlcywgRGVmYXVsdHMgdG8gdHJ1ZSAqL1xuICAgIHVzZUZhY2V0PzogYm9vbGVhblxuICB9XG4gIC8qKiBTZXQgdG8gdHJ1ZSB0byBkaXNhYmxlIGhpbnRpbmcgdG8gTW9uZ29EQiB0byB1c2UgJ2lkJyBhcyBpbmRleC4gVGhpcyBpcyBjdXJyZW50bHkgZG9uZSB3aGVuIGNvdW50aW5nIGRvY3VtZW50cyBmb3IgcGFnaW5hdGlvbi4gRGlzYWJsaW5nIHRoaXMgb3B0aW1pemF0aW9uIG1pZ2h0IGZpeCBzb21lIHByb2JsZW1zIHdpdGggQVdTIERvY3VtZW50REIuIERlZmF1bHRzIHRvIGZhbHNlICovXG4gIGRpc2FibGVJbmRleEhpbnRzPzogYm9vbGVhblxuICBtaWdyYXRpb25EaXI/OiBzdHJpbmdcbiAgLyoqIFRoZSBVUkwgdG8gY29ubmVjdCB0byBNb25nb0RCIG9yIGZhbHNlIHRvIHN0YXJ0IHBheWxvYWQgYW5kIHByZXZlbnQgY29ubmVjdGluZyAqL1xuICB1cmw6IGZhbHNlIHwgc3RyaW5nXG59XG5cbmV4cG9ydCB0eXBlIE1vbmdvb3NlQWRhcHRlciA9IEJhc2VEYXRhYmFzZUFkYXB0ZXIgJlxuICBBcmdzICYge1xuICAgIGNvbGxlY3Rpb25zOiB7XG4gICAgICBbc2x1Zzogc3RyaW5nXTogQ29sbGVjdGlvbk1vZGVsXG4gICAgfVxuICAgIGNvbm5lY3Rpb246IENvbm5lY3Rpb25cbiAgICBnbG9iYWxzOiBHbG9iYWxNb2RlbFxuICAgIG1vbmdvTWVtb3J5U2VydmVyOiBhbnlcbiAgICBzZXNzaW9uczogUmVjb3JkPG51bWJlciB8IHN0cmluZywgQ2xpZW50U2Vzc2lvbj5cbiAgICB2ZXJzaW9uczoge1xuICAgICAgW3NsdWc6IHN0cmluZ106IENvbGxlY3Rpb25Nb2RlbFxuICAgIH1cbiAgfVxuXG50eXBlIE1vbmdvb3NlQWRhcHRlclJlc3VsdCA9IChhcmdzOiB7IHBheWxvYWQ6IFBheWxvYWQgfSkgPT4gTW9uZ29vc2VBZGFwdGVyXG5cbmRlY2xhcmUgbW9kdWxlICdwYXlsb2FkJyB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgRGF0YWJhc2VBZGFwdGVyXG4gICAgZXh0ZW5kcyBPbWl0PEJhc2VEYXRhYmFzZUFkYXB0ZXIsICdzZXNzaW9ucyc+LFxuICAgICAgT21pdDxBcmdzLCAnbWlncmF0aW9uRGlyJz4ge1xuICAgIGNvbGxlY3Rpb25zOiB7XG4gICAgICBbc2x1Zzogc3RyaW5nXTogQ29sbGVjdGlvbk1vZGVsXG4gICAgfVxuICAgIGNvbm5lY3Rpb246IENvbm5lY3Rpb25cbiAgICBnbG9iYWxzOiBHbG9iYWxNb2RlbFxuICAgIG1vbmdvTWVtb3J5U2VydmVyOiBhbnlcbiAgICBzZXNzaW9uczogUmVjb3JkPG51bWJlciB8IHN0cmluZywgQ2xpZW50U2Vzc2lvbj5cbiAgICB2ZXJzaW9uczoge1xuICAgICAgW3NsdWc6IHN0cmluZ106IENvbGxlY3Rpb25Nb2RlbFxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9uZ29vc2VBZGFwdGVyKHtcbiAgYXV0b1BsdXJhbGl6YXRpb24gPSB0cnVlLFxuICBjb25uZWN0T3B0aW9ucyxcbiAgZGlzYWJsZUluZGV4SGludHMgPSBmYWxzZSxcbiAgbWlncmF0aW9uRGlyOiBtaWdyYXRpb25EaXJBcmcsXG4gIHVybCxcbn06IEFyZ3MpOiBNb25nb29zZUFkYXB0ZXJSZXN1bHQge1xuICBmdW5jdGlvbiBhZGFwdGVyKHsgcGF5bG9hZCB9OiB7IHBheWxvYWQ6IFBheWxvYWQgfSkge1xuICAgIGNvbnN0IG1pZ3JhdGlvbkRpciA9IG1pZ3JhdGlvbkRpckFyZyB8fCBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgJ3NyYy9taWdyYXRpb25zJylcbiAgICBtb25nb29zZS5zZXQoJ3N0cmljdFF1ZXJ5JywgZmFsc2UpXG5cbiAgICBleHRlbmRXZWJwYWNrQ29uZmlnKHBheWxvYWQuY29uZmlnKVxuICAgIGV4dGVuZFZpdGVDb25maWcocGF5bG9hZC5jb25maWcpXG5cbiAgICByZXR1cm4gY3JlYXRlRGF0YWJhc2VBZGFwdGVyPE1vbmdvb3NlQWRhcHRlcj4oe1xuICAgICAgbmFtZTogJ21vbmdvb3NlJyxcblxuICAgICAgLy8gTW9uZ29vc2Utc3BlY2lmaWNcbiAgICAgIGF1dG9QbHVyYWxpemF0aW9uLFxuICAgICAgY29sbGVjdGlvbnM6IHt9LFxuICAgICAgY29ubmVjdE9wdGlvbnM6IGNvbm5lY3RPcHRpb25zIHx8IHt9LFxuICAgICAgY29ubmVjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgZGlzYWJsZUluZGV4SGludHMsXG4gICAgICBnbG9iYWxzOiB1bmRlZmluZWQsXG4gICAgICBtb25nb01lbW9yeVNlcnZlcjogdW5kZWZpbmVkLFxuICAgICAgc2Vzc2lvbnM6IHt9LFxuICAgICAgdXJsLFxuICAgICAgdmVyc2lvbnM6IHt9LFxuXG4gICAgICAvLyBEYXRhYmFzZUFkYXB0ZXJcbiAgICAgIGJlZ2luVHJhbnNhY3Rpb24sXG4gICAgICBjb21taXRUcmFuc2FjdGlvbixcbiAgICAgIGNvbm5lY3QsXG4gICAgICBjcmVhdGUsXG4gICAgICBjcmVhdGVHbG9iYWwsXG4gICAgICBjcmVhdGVHbG9iYWxWZXJzaW9uLFxuICAgICAgY3JlYXRlTWlncmF0aW9uLFxuICAgICAgY3JlYXRlVmVyc2lvbixcbiAgICAgIGRlZmF1bHRJRFR5cGU6ICd0ZXh0JyxcbiAgICAgIGRlbGV0ZU1hbnksXG4gICAgICBkZWxldGVPbmUsXG4gICAgICBkZWxldGVWZXJzaW9ucyxcbiAgICAgIGRlc3Ryb3ksXG4gICAgICBmaW5kLFxuICAgICAgZmluZEdsb2JhbCxcbiAgICAgIGZpbmRHbG9iYWxWZXJzaW9ucyxcbiAgICAgIGZpbmRPbmUsXG4gICAgICBmaW5kVmVyc2lvbnMsXG4gICAgICBpbml0LFxuICAgICAgbWlncmF0ZUZyZXNoLFxuICAgICAgbWlncmF0aW9uRGlyLFxuICAgICAgcGF5bG9hZCxcbiAgICAgIHF1ZXJ5RHJhZnRzLFxuICAgICAgcm9sbGJhY2tUcmFuc2FjdGlvbixcbiAgICAgIHVwZGF0ZUdsb2JhbCxcbiAgICAgIHVwZGF0ZUdsb2JhbFZlcnNpb24sXG4gICAgICB1cGRhdGVPbmUsXG4gICAgICB1cGRhdGVWZXJzaW9uLFxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gYWRhcHRlclxufVxuIl0sIm5hbWVzIjpbIm1vbmdvb3NlQWRhcHRlciIsImF1dG9QbHVyYWxpemF0aW9uIiwiY29ubmVjdE9wdGlvbnMiLCJkaXNhYmxlSW5kZXhIaW50cyIsIm1pZ3JhdGlvbkRpciIsIm1pZ3JhdGlvbkRpckFyZyIsInVybCIsImFkYXB0ZXIiLCJwYXlsb2FkIiwicGF0aCIsInJlc29sdmUiLCJwcm9jZXNzIiwiY3dkIiwibW9uZ29vc2UiLCJzZXQiLCJleHRlbmRXZWJwYWNrQ29uZmlnIiwiY29uZmlnIiwiZXh0ZW5kVml0ZUNvbmZpZyIsImNyZWF0ZURhdGFiYXNlQWRhcHRlciIsIm5hbWUiLCJjb2xsZWN0aW9ucyIsImNvbm5lY3Rpb24iLCJ1bmRlZmluZWQiLCJnbG9iYWxzIiwibW9uZ29NZW1vcnlTZXJ2ZXIiLCJzZXNzaW9ucyIsInZlcnNpb25zIiwiYmVnaW5UcmFuc2FjdGlvbiIsImNvbW1pdFRyYW5zYWN0aW9uIiwiY29ubmVjdCIsImNyZWF0ZSIsImNyZWF0ZUdsb2JhbCIsImNyZWF0ZUdsb2JhbFZlcnNpb24iLCJjcmVhdGVNaWdyYXRpb24iLCJjcmVhdGVWZXJzaW9uIiwiZGVmYXVsdElEVHlwZSIsImRlbGV0ZU1hbnkiLCJkZWxldGVPbmUiLCJkZWxldGVWZXJzaW9ucyIsImRlc3Ryb3kiLCJmaW5kIiwiZmluZEdsb2JhbCIsImZpbmRHbG9iYWxWZXJzaW9ucyIsImZpbmRPbmUiLCJmaW5kVmVyc2lvbnMiLCJpbml0IiwibWlncmF0ZUZyZXNoIiwicXVlcnlEcmFmdHMiLCJyb2xsYmFja1RyYW5zYWN0aW9uIiwidXBkYXRlR2xvYmFsIiwidXBkYXRlR2xvYmFsVmVyc2lvbiIsInVwZGF0ZU9uZSIsInVwZGF0ZVZlcnNpb24iXSwibWFwcGluZ3MiOiI7Ozs7K0JBd0ZnQkE7OztlQUFBQTs7O2lFQXBGSzs2REFDSjswQkFDcUI7eUJBTWQ7d0JBQ0Q7OEJBQ007cUNBQ087aUNBQ0o7K0JBQ0Y7NEJBQ0g7MkJBQ0Q7Z0NBQ0s7eUJBQ1A7a0NBQ1M7cUNBQ0c7c0JBQ2Y7NEJBQ007b0NBQ1E7eUJBQ1g7OEJBQ0s7c0JBQ1I7OEJBQ1E7NkJBQ0Q7a0NBQ0s7bUNBQ0M7cUNBQ0U7OEJBQ1A7cUNBQ087MkJBQ1Y7K0JBQ0k7Ozs7OztBQWtEdkIsU0FBU0EsZ0JBQWdCLEVBQzlCQyxvQkFBb0IsSUFBSSxFQUN4QkMsY0FBYyxFQUNkQyxvQkFBb0IsS0FBSyxFQUN6QkMsY0FBY0MsZUFBZSxFQUM3QkMsR0FBRyxFQUNFO0lBQ0wsU0FBU0MsUUFBUSxFQUFFQyxPQUFPLEVBQXdCO1FBQ2hELE1BQU1KLGVBQWVDLG1CQUFtQkksYUFBSSxDQUFDQyxPQUFPLENBQUNDLFFBQVFDLEdBQUcsSUFBSTtRQUNwRUMsaUJBQVEsQ0FBQ0MsR0FBRyxDQUFDLGVBQWU7UUFFNUJDLElBQUFBLHdDQUFtQixFQUFDUCxRQUFRUSxNQUFNO1FBQ2xDQyxJQUFBQSxrQ0FBZ0IsRUFBQ1QsUUFBUVEsTUFBTTtRQUUvQixPQUFPRSxJQUFBQSwrQkFBcUIsRUFBa0I7WUFDNUNDLE1BQU07WUFFTixvQkFBb0I7WUFDcEJsQjtZQUNBbUIsYUFBYSxDQUFDO1lBQ2RsQixnQkFBZ0JBLGtCQUFrQixDQUFDO1lBQ25DbUIsWUFBWUM7WUFDWm5CO1lBQ0FvQixTQUFTRDtZQUNURSxtQkFBbUJGO1lBQ25CRyxVQUFVLENBQUM7WUFDWG5CO1lBQ0FvQixVQUFVLENBQUM7WUFFWCxrQkFBa0I7WUFDbEJDLGtCQUFBQSxrQ0FBZ0I7WUFDaEJDLG1CQUFBQSxvQ0FBaUI7WUFDakJDLFNBQUFBLGdCQUFPO1lBQ1BDLFFBQUFBLGNBQU07WUFDTkMsY0FBQUEsMEJBQVk7WUFDWkMscUJBQUFBLHdDQUFtQjtZQUNuQkMsaUJBQUFBLGdDQUFlO1lBQ2ZDLGVBQUFBLDRCQUFhO1lBQ2JDLGVBQWU7WUFDZkMsWUFBQUEsc0JBQVU7WUFDVkMsV0FBQUEsb0JBQVM7WUFDVEMsZ0JBQUFBLDhCQUFjO1lBQ2RDLFNBQUFBLGdCQUFPO1lBQ1BDLE1BQUFBLFVBQUk7WUFDSkMsWUFBQUEsc0JBQVU7WUFDVkMsb0JBQUFBLHNDQUFrQjtZQUNsQkMsU0FBQUEsZ0JBQU87WUFDUEMsY0FBQUEsMEJBQVk7WUFDWkMsTUFBQUEsVUFBSTtZQUNKQyxjQUFBQSwwQkFBWTtZQUNaMUM7WUFDQUk7WUFDQXVDLGFBQUFBLHdCQUFXO1lBQ1hDLHFCQUFBQSx3Q0FBbUI7WUFDbkJDLGNBQUFBLDBCQUFZO1lBQ1pDLHFCQUFBQSx3Q0FBbUI7WUFDbkJDLFdBQUFBLG9CQUFTO1lBQ1RDLGVBQUFBLDRCQUFhO1FBQ2Y7SUFDRjtJQUVBLE9BQU83QztBQUNUIn0=